install.packages("EBImage")
# List of required packages
required_packages <- c("googledrive", "magick", "imager", "dplyr")
# Install any missing packages
new_packages <- required_packages[!(required_packages %in% installed.packages()[, "Package"])]
if (length(new_packages)) install.packages(new_packages)
# Load libraries
lapply(required_packages, library, character.only = TRUE)
# Set your Google Drive folder ID or name
folder_id <- "YOUR_FOLDER_ID"  # Replace with your actual Google Drive folder ID
# Set your Google Drive folder ID or name
folder_id <- "C.cham photos"  # Replace with your actual Google Drive folder ID
# Authenticate Google Drive
drive_auth()
# Get list of image files in the folder
folder_files <- drive_ls(as_id(folder_id))
image_files <- folder_files[grep("\\.jpg$|\\.png$|\\.jpeg$", folder_files$name, ignore.case = TRUE), ]
getwd()
# Set your Google Drive folder ID or name
folder_id <- "1HuCLlFirL0O2iH1isCvRe9PjMa7SnrEI"  # Replace with your actual Google Drive folder ID
# Authenticate Google Drive
drive_auth()
# Get list of image files in the folder
folder_files <- drive_ls(as_id(folder_id))
image_files <- folder_files[grep("\\.jpg$|\\.png$|\\.jpeg$", folder_files$name, ignore.case = TRUE), ]
image_files
# Create an output folder if it doesn't exist
output_folder <- "Output"
if (!dir.exists(output_folder)) dir.create(output_folder)
# Download images to a temporary directory
image_paths <- sapply(image_files$id, function(file_id) {
temp_path <- tempfile(fileext = ".jpg")
drive_download(as_id(file_id), path = temp_path, overwrite = TRUE)
return(temp_path)
})
# Process each image
results <- lapply(image_paths, function(image_path) {
img <- image_read(image_path)
img_gray <- image_convert(img, colorspace = "gray")
img_array <- as.cimg(img_gray)
# Apply thresholding to detect the macroalgae
threshold_value <- 0.2  # Adjust as needed
img_thresh <- img_array > threshold_value
# Measure Surface Area
surface_area <- sum(img_thresh)  # Count nonzero pixels
# Extract Height and Width
dims <- dim(img_thresh)
plant_height <- sum(rowSums(img_thresh) > 0)  # Vertical extent
plant_width <- sum(colSums(img_thresh) > 0)  # Horizontal extent
# Extract Color from 5 Random Points
set.seed(42)
nonzero_pixels <- which(img_thresh > 0, arr.ind = TRUE)
sampled_points <- nonzero_pixels[sample(nrow(nonzero_pixels), 5), , drop = FALSE]
colors <- apply(sampled_points, 1, function(pt) {
image_data <- as.array(img)
rgb_vals <- image_data[pt[1], pt[2], ]
return(rgb_vals)
})
color_samples <- t(colors)
# Skeletonize and Count Branches
edges <- imager::deriche(img_array, sigma = 1)  # Edge detection
skeleton <- edges > 0.2  # Adjust threshold
branches_count <- sum(skeleton)  # Count edge pixels
# Detect Main Axis and Subbranches (Simple Approximation)
central_col <- round(dims[2] / 2)
central_axis <- img_thresh[, central_col]
central_branches <- sum(diff(central_axis) == 1)
# Overlay skeleton and measurements on image
img_annotated <- image_draw(img)
points(sampled_points[, 2], sampled_points[, 1], col = "yellow", pch = 19, cex = 2)
segments(10, 10, 10, plant_height, col = "blue", lwd = 5)
segments(10, plant_height, plant_width, plant_height, col = "green", lwd = 5)
dev.off()
# Save annotated image
output_path <- file.path(output_folder, paste0(basename(image_path), "_annotated.jpg"))
image_write(img_annotated, output_path)
# Output Results
list(
Image_Name = basename(image_path),
Surface_Area = surface_area,
Plant_Width = plant_width,
Plant_Height = plant_height,
Color_Samples = color_samples,
Total_Branches = branches_count,
Central_Branches = central_branches,
Annotated_Image = output_path
)
})
# Process each image
results <- lapply(image_paths, function(image_path) {
# Read image using magick
img <- image_read(image_path)
# Convert to grayscale
img_gray <- image_convert(img, colorspace = "gray")
# Convert to imager format (Fix applied)
img_gray_data <- image_data(img_gray, channels = "gray")
img_array <- as.cimg(as.numeric(img_gray_data) / 255)  # Normalize grayscale values
# Apply thresholding to detect the macroalgae
threshold_value <- 0.2  # Adjust as needed
img_thresh <- img_array > threshold_value
# Measure Surface Area
surface_area <- sum(img_thresh)  # Count nonzero pixels
# Extract Height and Width
dims <- dim(img_thresh)
plant_height <- sum(rowSums(img_thresh) > 0)  # Vertical extent
plant_width <- sum(colSums(img_thresh) > 0)  # Horizontal extent
# Extract Color from 5 Random Points
set.seed(42)
nonzero_pixels <- which(img_thresh > 0, arr.ind = TRUE)
sampled_points <- nonzero_pixels[sample(nrow(nonzero_pixels), 5), , drop = FALSE]
colors <- apply(sampled_points, 1, function(pt) {
image_data <- as.array(img)
rgb_vals <- image_data[pt[1], pt[2], ]
return(rgb_vals)
})
color_samples <- t(colors)
# Skeletonize and Count Branches
edges <- imager::deriche(img_array, sigma = 1)  # Edge detection
skeleton <- edges > 0.2  # Adjust threshold
branches_count <- sum(skeleton)  # Count edge pixels
# Detect Main Axis and Subbranches (Simple Approximation)
central_col <- round(dims[2] / 2)
central_axis <- img_thresh[, central_col]
central_branches <- sum(diff(central_axis) == 1)
# Overlay skeleton and measurements on image
img_annotated <- image_draw(img)
points(sampled_points[, 2], sampled_points[, 1], col = "yellow", pch = 19, cex = 2)
segments(10, 10, 10, plant_height, col = "blue", lwd = 5)
segments(10, plant_height, plant_width, plant_height, col = "green", lwd = 5)
dev.off()
# Save annotated image
output_path <- file.path(output_folder, paste0(basename(image_path), "_annotated.jpg"))
image_write(img_annotated, output_path)
# Output Results
list(
Image_Name = basename(image_path),
Surface_Area = surface_area,
Plant_Width = plant_width,
Plant_Height = plant_height,
Color_Samples = color_samples,
Total_Branches = branches_count,
Central_Branches = central_branches,
Annotated_Image = output_path
)
})
image_paths <- image_paths[1]
image_paths
## 📌 1️⃣ Read and Convert Image
img <- image_read(image_path)
image_path <- image_paths[1]
## 📌 1️⃣ Read and Convert Image
img <- image_read(image_path)
img_gray <- image_convert(img, colorspace = "gray")
img_gray_data <- image_data(img_gray, channels = "gray")  # Extract pixel values
img_array <- as.cimg(as.numeric(img_gray_data) / 255)  # Normalize pixel values
## 📌 1️⃣ Read and Convert Image
img <- image_read(image_path)
img_gray <- image_convert(img, colorspace = "gray")
img_gray_data <- image_data(img_gray, channels = "gray")  # Extract pixel values
img_gray_data <- drop(as.array(img_gray))  # Convert to a simple matrix (drop unnecessary dimensions)
img_array <- as.cimg(img_gray_data)  # Convert properly to imager format
## 📌 1️⃣ Read and Convert Image
img <- image_read(image_path)
img_gray <- image_convert(img, colorspace = "gray")
img_gray_data <- image_data(img_gray, channels = "gray")  # Extract pixel values
# Convert magick image to grayscale and extract pixel values
img_gray_data <- image_data(img_gray, channels = "gray")  # Extract grayscale data
# Convert to numeric matrix and normalize values
img_gray_matrix <- as.numeric(img_gray_data[1,,]) / 255  # Ensure 2D matrix
# Convert to imager format
img_array <- as.cimg(img_gray_matrix)
## 📌 2️⃣ Thresholding to Extract Macroalgae
threshold_value <- 0.2  # Adjust as needed
img_thresh <- img_array > threshold_value
plot(img_thresh, main = "Thresholded Macroalgae")  # Debug visualization
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
source("process_plate_run.R")
source("process_plate_run.R")
source("process_plate_run.R")
ash_data <- read_excel("ash_final.xlsx", sheet = 1)
head(ash_data)
ash_data <- read_excel("ash_final.xlsx", sheet = 1)
head(ash_data)
ash_clean <- ash_data %>%
select(same_id, rep_id, ash_per) %>%
mutate(ash_per = as.numeric(ash_per)) %>%
drop_na()
ash_plot <- ggplot(ash_summary, aes(x = reorder(same_id, -mean_ash_percent), y = mean_ash_percent)) +
geom_col(fill = "skyblue") +
geom_errorbar(aes(ymin = mean_ash_percent - sd_ash_percent, ymax = mean_ash_percent + sd_ash_percent), width = 0.2) +
labs(title = "Ash Content by Replicate Group", x = "Replicate Group", y = "Mean Ash %") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ash_summary
ash_summary <- ash_clean %>%
group_by(same_id) %>%
summarise(
mean_ash_percent = mean(ash_per, na.rm = TRUE),
sd_ash_percent = sd(ash_per, na.rm = TRUE),
n_reps = n()
) %>%
arrange(desc(n_reps))
View(ash_summary)
source("process_plate_run.R") #Contains all the functions I have built
load_excel_files("Input PE")
# Define blank sample wells for each experimental run
blanks1 <- "A01"
blanks2 <- c("A01", "A02", "A03")
blanks3 <- c("H09", "H10", "H11")
# Create named lists of raw dataframes and corresponding blanks
listPE <- list(PE1 = PE1, PE2 = PE2, PE3 = PE3)
listFluor <- list(Fluor1 = Fluor1, Fluor2 = Fluor2, Fluor3 = Fluor3)
listblank <- list(blanks1, blanks2, blanks3)
# Clean and structure all datasets using a custom `tidy_all()` function
tidy_all(listPE, listblank)
source("process_plate_run.R") #Contains all the functions I have built
load_excel_files("Input PE")
getwd()
source("process_plate_run.R") #Contains all the functions I have built
load_excel_files("Input PE")
load_excel_files("Input PE")
load_excel_files("Input PE")
list.files()
load_excel_files("Input PE")
source("process_plate_run.R") #Contains all the functions I have built
source("process_plate_run.R") #Contains all the functions I have built
load_excel_files(input_subfolder = "input PE", sheet_index = 2)
# Create named lists of raw dataframes and corresponding blanks
listPE <- list(PE1 = PE1, PE2 = PE2, PE3 = PE3, PE4 = PE4)
listFluor <- list(Fluor1 = Fluor1, Fluor2 = Fluor2, Fluor3 = Fluor3, Fluor4=Fluor4)
# Create named lists of raw dataframes and corresponding blanks
listPE <- list(PE1 = PE1, PE2 = PE2_2, PE3 = PE3, PE4 = PE4)
source("process_plate_run.R") #Contains all the functions I have built
load_excel_files(input_subfolder = "input PE", sheet_index = 2)
load_excel_files(input_subfolder = "Input PE", sheet_index = 2)
load_excel_files(input_subfolder = "Input PE", sheet_index = 2)
input_folder <- here::here("data/excels")
input_folder
input_folder <- here::here("Input PE")
input_folder
excel_files <- list.files(path = input_folder, pattern = "(?i)\\.xlsx?$", full.names = TRUE)
file <- excel_files[1]
file
getwd()
here::here()
input_folder <- here::here("Input PE")
input_folder
input_folder <- "Input PE"  # relative to your current working directory
list.files(path = input_folder, pattern = "\\.xlsx$", full.names = TRUE)
input_folder <- here::here("Input PE")
input_folder
load_excel_files(input_subfolder = "Input PE", sheet_index = 2)
source("process_plate_run.R") #Contains all the functions I have built
load_excel_files(input_subfolder = "Input PE", sheet_index = 2)
load_excel_files(input_subfolder = "Input PE", sheet_index = 2)
excel_files <- list.files(path = input_folder, pattern = "\\.xlsx?$", full.names = TRUE)
print(excel_files)
input_folder <- "Input PE"
load_excel_files(input_subfolder = "Input PE", sheet_index = 2)
getwd()
input_folder <- "Input PE"
load_excel_files(input_subfolder = "Input PE", sheet_index = 2)
excel_files <- list.files(path = input_folder, pattern = "\\.xlsx?$", full.names = TRUE)
list()
list(excel_files)
input_folder <- "Input PE"
excel_files <- list.files(path = input_folder, pattern = "\\.xlsx?$", full.names = TRUE)
print(excel_files)
load_excel_files(input_subfolder = "Input PE", sheet_index = 2)
file <- excel_files[1]
name <- tools::file_path_sans_ext(basename(file))
file
sheet_names <- readxl::excel_sheets(file)
#
#
load_excel_files <- function(input_folder) {
if (!requireNamespace("readxl", quietly = TRUE)) {
stop("The 'readxl' package is required but not installed. Please run install.packages('readxl')")
}
if (!requireNamespace("here", quietly = TRUE)) {
stop("The 'here' package is required but not installed. Please run install.packages('here')")
}
input_path <- here::here(input_folder)
excel_files <- list.files(path = input_path, pattern = "\\.xlsx?$", full.names = TRUE)
if (length(excel_files) == 0) {
warning("No Excel files found in ", input_path)
return(invisible(NULL))
}
for (file in excel_files) {
name <- tools::file_path_sans_ext(basename(file))
sheet_names <- readxl::excel_sheets(file)
sheet_to_read <- if (length(sheet_names) >= 2) sheet_names[2] else sheet_names[1]
data <- suppressMessages(suppressWarnings(
readxl::read_excel(file, sheet = sheet_to_read)
))
assign(name, data, envir = .GlobalEnv)
}
message("Finished loading ", length(excel_files), " Excel files from ", input_path)
}
load_excel_files("Input PE")
input_path <- here::here(input_folder)
input_path
excel_files <- list.files(path = input_path, pattern = "\\.xlsx?$", full.names = TRUE)
excel_files
excel_files <- list.files(path = input_path, pattern = ".xlsx?$", full.names = TRUE)
excel_files
input_path <- here::here(input_folder)
input path
input_path
load_excel_files("Input PE/")
excel_files <- list.files(path = input_path, pattern = ".xlsx", full.names = TRUE)
excel_files
excel_files <- list.files(path = input_path, pattern = "\\.xlsx?$", full.names = TRUE)
excel_files
input_path <- here::here(input_folder)
input_path
excel_files <- list.files(path = input_path, pattern = "\\.xlsx?$", full.names = TRUE)
excel_fules
excel_files
here::here()
list.dirs()
list.files()
setwd(G:\My Drive\ACES\Dissy\analysis\PE\R\Input PE)
setwd(G:/My Drive/ACES/Dissy/analysis/PE/R)
setwd("G:\My Drive\ACES\Dissy\analysis\PE\R\Input PE")
setwd("G:/My Drive/ACES/Dissy/analysis/PE/R")
list.dirs
list.dirs()
source("G:/My Drive/ACES/Dissy/analysis/PE/R/process_plate_run.R")
input_folder <- "/Input PE"
excel_files <- list.files(path = input_folder, pattern = "\\.xlsx?$", full.names = TRUE)
excel_files
input_folder <- "Input PE"
excel_files <- list.files(path = input_folder, pattern = "\\.xlsx?$", full.names = TRUE)
excel_files
load_excel_files("Input PE")
getwd()
input_folder <- "Input PE"
excel_files <- list.files(path = input_folder, pattern = "\\.xlsx?$", full.names = TRUE)
library(readxl)
library(tools)  # for file_path_sans_ext
for (file in excel_files) {
# Extract clean name
name <- file_path_sans_ext(basename(file))
# Get sheet names
sheet_names <- excel_sheets(file)
# Select 2nd sheet if it exists, otherwise 1st
sheet_to_read <- if (length(sheet_names) >= 2) sheet_names[2] else sheet_names[1]
# Read the sheet
data <- suppressMessages(read_excel(file, sheet = sheet_to_read))
# Assign to global environment
assign(name, data, envir = .GlobalEnv)
message("Loaded: ", name, " from sheet '", sheet_to_read, "'")
}
input_folder <- "Input PE"
excel_files <- list.files(path = input_folder, pattern = "\\.xlsx?$", full.names =TRUE)
for (file in excel_files) {
# Extract clean name
name <- file_path_sans_ext(basename(file))
# Get sheet names
sheet_names <- excel_sheets(file)
# Select 2nd sheet if it exists, otherwise 1st
sheet_to_read <- if (length(sheet_names) >= 2) sheet_names[2] else sheet_names[1]
# Read the sheet
data <- suppressMessages(read_excel(file, sheet = sheet_to_read))
# Assign to global environment
assign(name, data, envir = .GlobalEnv)
message("Loaded: ", name, " from sheet '", sheet_to_read, "'")
}
input_folder <- "Input PE"
excel_files <- list.files(path = input_folder, pattern = "\\.xlsx?$", full.names =TRUE)
excel_files
