geom_text(aes(label = round(diff_absorbance, 3)), vjust = -0.5, size = 3) +  # labels above bars
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +  # vertical x labels
labs(
title = "Difference between X565 and X564 Absorbance per Sample",
x = "Sample (Cell_ID)",
y = "Difference (X565 - X564)"
)
ggplotly(p1)
# scripts/process_plate_run.R
library(readxl)
library(dplyr)
library(tidyr)
library(purrr)
library(zoo)
library(ggplot2)
library(lubridate)
library(stringr)
library(tools)
library(plotly)
# Prompt user to select working directory
setwd(wd)
#libraries are loaded in the Scripts
source("process_plate_run.R") #Contains all the functions I have built
# tempvariables
wd <- "G:/My Drive/ACES/Dissy/analysis/PE"
input_file <- "PE_2 13_5_25.xlsx"
output_file<-"tidy_final_PE 2_13_5_25.csv"
blanks<- c("A01", "A02", "A03") #which are the blanks for the input file
############################################
tidy_data <- tidy_and_correct(input_file, blanks)
summary(tidy_data$X565) #prints summary data
summary(tidy_data$X564) #prints summary data
tidy_data <- tidy_data %>%
mutate(diff_absorbance = X565 - X564)
# Create histogram data by sample, with labels
p1<- ggplot(tidy_data, aes(x = Cell_ID, y = diff_absorbance)) +
geom_bar(stat = "identity", fill = "skyblue") +  # bars = difference values
geom_text(aes(label = round(diff_absorbance, 3)), vjust = -0.5, size = 3) +  # labels above bars
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +  # vertical x labels
labs(
title = "Difference between X565 and X564 Absorbance per Sample",
x = "Sample (Cell_ID)",
y = "Difference (X565 - X564)"
)
ggplotly(p1)
#libraries are loaded in the Scripts
source("process_plate_run.R") #Contains all the functions I have built
pe <-read_xlsx("pe2_weights_id.xlsx") #This is the file with the sample weights
joindf_by_id(tidy_data, pe, "pe_joined.csv")
pe_joined2 <- calculate_pe_and_filter(pe_joined, sample_weight_col = "sample weight", sample_id_col="join_id")
analyze_replicates(pe_joined2)
Fluor <- tidy_and_correct("PE_2 13_15_25.csv", blanks)
getwd()
# Prompt user to select working directory
setwd(wd)
getwd()
setwd(wd)
Fluor <- tidy_and_correct("PE_2 13_15_25.csv", blanks)
Fluor <- tidy_and_correct("PE_2 13_15_25.xlsx", blanks)
Fluor <- tidy_and_correct("PE_2 13_15_25.xlxs", blanks)
setwd(wd)
Fluor <- tidy_and_correct("PE_2 13_15_25.xlsx", blanks)
Fluor <- tidy_and_correct("Flor_02 13_15_25.xlsx", blanks)
setwd(wd)
getwd()
Fluor <- tidy_and_correct("Flor_02 13_15_25.xlsx", blanks)
Fluor <- tidy_and_correct("Flor_02 13_05_2025.xlsx", blanks)
Fluor <- tidy_and_correct("Flor_02 13_05_2025.xlsx", blanks)
Fluor <- tidy_and_correct("Flor_02 13_05_2025.xlsx", blanks)
#libraries are loaded in the Scripts
source("process_plate_run.R") #Contains all the functions I have built
Fluor <- tidy_and_correct("Flor_02 13_05_2025.xlsx", blanks, sheet=2)
#libraries are loaded in the Scripts
source("process_plate_run.R") #Contains all the functions I have built
#libraries are loaded in the Scripts
source("process_plate_run.R") #Contains all the functions I have built
Fluor <- tidy_and_correct("Flor_02 13_05_2025.xlsx", blanks, sheet=2)
#libraries are loaded in the Scripts
source("process_plate_run.R") #Contains all the functions I have built
#libraries are loaded in the Scripts
source("process_plate_run.R") #Contains all the functions I have built
#libraries are loaded in the Scripts
source("process_plate_run.R") #Contains all the functions I have built
Fluor <- tidy_and_correct("Flor_02 13_05_2025.xlsx", blanks, sheet=2)
source("process_plate_run.R")
Fluor <- tidy_and_correct("Flor_02 13_05_2025.xlsx", blanks, sheet=2)
Fluor <- tidy_and_correct("Flor_02 13_05_2025.xlsx", blanks, sheet=2)
View(Fluor)
source("process_plate_run.R")
Fluor <- tidy_and_correct("Flor_02 13_05_2025.xlsx", blanks, sheet=2)
View(Fluor)
p2<- ggplot(tidy_data, aes(x = Cell_ID, y = diff_absorbance)) +
geom_bar(stat = "identity", fill = "skyblue") +  # bars = difference values
geom_text(aes(label = round(diff_absorbance, 3)), vjust = -0.5, size = 3) +  # labels above bars
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +  # vertical x labels
labs(
title = "530/25,590/35",
x = "Sample (Cell_ID)",
y = "Fluoresence"
)
ggplotly(p2)
View(Fluor)
p2<- ggplot(Fluor, aes(x = Cell_ID, y = red)) +
geom_bar(stat = "identity", fill = "skyblue") +  # bars = difference values
geom_text(aes(label = round(red, 3)), vjust = -0.5, size = 3) +  # labels above bars
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +  # vertical x labels
labs(
title = "530/25,590/35",
x = "Sample (Cell_ID)",
y = "Fluoresence"
)
ggplotly(p2)
pe_joined<- joindf_by_id(pe_joined2, Fluor, "fluor_pe_joined.csv")
View(pe_joined2)
joindf_by_id <- function(df1, df2, output_name, key_df1, key_df2) {
# Trim column names
colnames(df1) <- trimws(colnames(df1))
colnames(df2) <- trimws(colnames(df2))
# Check that the specified keys exist in their respective dataframes
if (!(key_df1 %in% colnames(df1))) {
stop(paste0("Error: '", key_df1, "' column not found in df1."))
}
if (!(key_df2 %in% colnames(df2))) {
stop(paste0("Error: '", key_df2, "' column not found in df2."))
}
# Rename join keys to a common name "join_id" for joining
df1_renamed <- df1 %>% rename(join_id = all_of(key_df1))
df2_renamed <- df2 %>% rename(join_id = all_of(key_df2))
# Join logic: left join from smaller to larger dataframe
if (nrow(df1_renamed) <= nrow(df2_renamed)) {
result <- df1_renamed %>% left_join(df2_renamed, by = "join_id")
base_ids <- df1_renamed$join_id
compare_ids <- df2_renamed$join_id
unmatched_df <- df2_renamed %>% filter(!(join_id %in% base_ids))
} else {
result <- df2_renamed %>% left_join(df1_renamed, by = "join_id")
base_ids <- df2_renamed$join_id
compare_ids <- df1_renamed$join_id
unmatched_df <- df1_renamed %>% filter(!(join_id %in% base_ids))
}
# Save joined result
write.csv(result, output_name, row.names = FALSE)
# Assign to global environment
object_name <- file_path_sans_ext(basename(output_name))
assign(object_name, result, envir = .GlobalEnv)
# Save unmatched rows to CSV
unmatched_csv <- paste0("unmatched_rows_", object_name, ".csv")
write.csv(unmatched_df, unmatched_csv, row.names = FALSE)
# Print "needs to be repeated" messages
repeat_list <- unique(unmatched_df[[1]])  # first column of unmatched
cat("\nValues needing repetition:\n")
cat(paste0(repeat_list, " needs to be repeated\n"), sep = "")
# Report
matched <- sum(compare_ids %in% base_ids)
unmatched_count <- nrow(unmatched_df)
report <- list(
merged_cells = matched,
unmatched_cells = unmatched_count,
unmatched_saved_to = unmatched_csv
)
message("Join complete. Output saved to: ", output_name)
return(report)
}
source("G:/My Drive/ACES/Dissy/analysis/PE/process_plate_run.R")
pe_joined<- joindf_by_id(pe_joined2, Fluor, "fluor_pe_joined.csv")
pe_joined<- joindf_by_id(pe_joined2, Fluor, "fluor_pe_joined.csv", key_df1 = "join_ID", key_df2 = "Cell_ID")
View(pe_joined2)
pe_joined<- joindf_by_id(pe_joined2, Fluor, "fluor_pe_joined.csv", key_df1 = "join_id", key_df2 = "Cell_ID")
pe_fluor_joined<- joindf_by_id(pe_joined2, Fluor, "fluor_pe_joined.csv", key_df1 = "join_id", key_df2 = "Cell_ID")
View(pe_fluor_joined)
View(fluor_pe_joined)
# Prompt user to select working directory
setwd(wd)
#libraries are loaded in the Scripts
source("process_plate_run.R") #Contains all the functions I have built
# tempvariables
wd <- "G:/My Drive/ACES/Dissy/analysis/PE"
input_file <- "PE_2 13_5_25.xlsx"
output_file<-"tidy_final_PE 2_13_5_25.csv"
blanks<- c("A01", "A02", "A03") #which are the blanks for the input file
############################################
tidy_data <- tidy_and_correct(input_file, blanks)
summary(tidy_data$X565) #prints summary data
View(tidy_data)
############################################
tidy_data <- tidy_and_correct(input_file, blanks)
source("G:/My Drive/ACES/Dissy/analysis/PE/process_plate_run.R")
input_path
wd <- "G:/My Drive/ACES/Dissy/analysis/PE"
setwd(wd)
input_file <- "PE_2 13_5_25.xlsx"
output_file<-"tidy_PE 2_13_5_25.csv"
blanks<- c("A01", "A02", "A03")
# Load data
df_raw <- readxl::read_excel(input_path, sheet = sheet, col_names = FALSE)
input_path <- "PE_2 13_5_25.xlsx"
# Load data
df_raw <- readxl::read_excel(input_path, sheet = sheet, col_names = FALSE)
sheet = 2
# Load data
df_raw <- readxl::read_excel(input_path, sheet = sheet, col_names = FALSE)
View(df_raw)
# Remove decorative header row
df <- df_raw[-1, ]
View(df)
View(df_raw)
# Fill down row labels (first column: A, B, C...)
df[[1]] <- zoo::na.locf(df[[1]])
View(df)
# Extract wavelength string from last column
wl_string <- as.character(df[1, ncol(df)])
wl_vector <- str_split(wl_string, ",")[[1]] %>% str_trim()
num_wl <- length(wl_vector)
wl_vector
wl_string
# Assign column names for plate columns
colnames(df)[1:13] <- c("Row", as.character(1:12))
df <- df[, 1:13]  # exclude last column (wavelength string)
View(df)
# Pivot to long format: Row + Column + Value
tidy_df <- df %>%
pivot_longer(cols = -Row, names_to = "Column", values_to = "Value") %>%
mutate(
Column = as.integer(Column),
Cell_ID = sprintf("%s%02d", Row, Column),
Value = as.numeric(Value)
) %>%
select(Cell_ID, Value)
View(tidy_df)
num_wl > 1
# Extract wavelength string from last column
wl_string <- as.character(df[1, ncol(df)])
wl_string
# Load data
df_raw <- readxl::read_excel(input_path, sheet = sheet, col_names = FALSE)
# Remove decorative header row
df <- df_raw[-1, ]
# Fill down row labels (first column: A, B, C...)
df[[1]] <- zoo::na.locf(df[[1]])
# Extract wavelength string from last column
wl_string <- as.character(df[1, ncol(df)])
wl_string
View(df)
source("G:/My Drive/ACES/Dissy/analysis/PE/process_plate_run.R")
source("G:/My Drive/ACES/Dissy/analysis/PE/process_plate_run.R")
############################################
tidy_data <- tidy_and_correct(input_file, blanks)
View(tidy_data)
summary(tidy_data$X565) #prints summary data
summary(tidy_data$X564) #prints summary data
tidy_data <- tidy_data %>%
mutate(diff_absorbance = X565 - X564)
View(tidy_data)
summary(tidy_data$565) #prints summary data
summary(tidy_data$564) #prints summary data
############################################
tidy_data <- tidy_and_correct(input_file, blanks)
############################################
tidy_data <- tidy_and_correct(input_file, blanks)
summary(tidy_data$565) #prints summary data
#Add X before column numbers to make easier to handle
tidy_data <- tidy_data %>%
mutate(
Column = as.integer(Column),
Cell_ID = sprintf("%s%02d", Row, Column),
Wavelength = paste0("X", Wavelength),  # 👈 Add X prefix here
Value = as.numeric(Value)
) %>%
select(Cell_ID, Wavelength, Value)
source("G:/My Drive/ACES/Dissy/analysis/PE/process_plate_run.R")
############################################
tidy_data <- tidy_and_correct(input_file, blanks)
View(tidy_data)
summary(tidy_data$X565) #prints summary data
summary(tidy_data$X564) #prints summary data
tidy_data <- tidy_data %>%
mutate(diff_absorbance = X565 - X564)
# Create histogram data by sample, with labels
p1<- ggplot(tidy_data, aes(x = Cell_ID, y = diff_absorbance)) +
geom_bar(stat = "identity", fill = "skyblue") +  # bars = difference values
geom_text(aes(label = round(diff_absorbance, 3)), vjust = -0.5, size = 3) +  # labels above bars
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +  # vertical x labels
labs(
title = "Difference between 565 and 564 Absorbance per Sample",
x = "Sample (Cell_ID)",
y = "Difference (X565 - X564)"
)
ggplotly(p1)
pe <-read_xlsx("pe2_weights_id.xlsx") #This is the file with the sample weights
joindf_by_id(tidy_data, pe, "pe_joined.csv")
View(tidy_data)
View(pe)
joindf_by_id(tidy_data, pe, "pe_joined.csv", key_df1 = "Cell_ID", key_df2= "plate well")
View(tidy_data)
pe <-read_xlsx("pe2_weights_id.xlsx") #This is the file with the sample weights
joindf_by_id(tidy_data, pe, "pe_joined.csv", key_df1 = "Cell_ID", key_df2= "plate well")
pe <-read_xlsx("pe2_weights_id.xlsx") #This is the file with the sample weights
joindf_by_id(tidy_data, pe, "pe_joined.csv", key_df1 = "Cell_ID", key_df2= "plate well")
pe <-read_xlsx("pe2_weights_id.xlsx") #This is the file with the sample weights
joindf_by_id(tidy_data, pe, "pe_joined.csv", key_df1 = "Cell_ID", key_df2= "plate well")
View(pe_joined)
View(tidy_data)
View(tidy_data)
pe_joined2 <- calculate_pe_and_filter(pe_joined, sample_weight_col = "sample weight", sample_id_col="join_id")
setwd(wd)
source("process_plate_run.R")
Fluor <- tidy_and_correct("Flor_02 13_05_2025.xlsx", blanks, sheet=2)
p2<- ggplot(Fluor, aes(x = Cell_ID, y = red)) +
geom_bar(stat = "identity", fill = "skyblue") +  # bars = difference values
geom_text(aes(label = round(red, 3)), vjust = -0.5, size = 3) +  # labels above bars
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +  # vertical x labels
labs(
title = "530/25,590/35",
x = "Sample (Cell_ID)",
y = "Fluoresence"
)
ggplotly(p2)
setwd(wd)
source("process_plate_run.R")
Fluor <- tidy_and_correct("Flor_02 13_05_2025.xlsx", blanks, sheet=2)
View(Fluor)
p2<- ggplot(Fluor, aes(x = Cell_ID, y = Xred)) +
geom_bar(stat = "identity", fill = "skyblue") +  # bars = difference values
geom_text(aes(label = round(red, 3)), vjust = -0.5, size = 3) +  # labels above bars
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +  # vertical x labels
labs(
title = "530/25,590/35",
x = "Sample (Cell_ID)",
y = "Fluoresence"
)
ggplotly(p2)
p2<- ggplot(Fluor, aes(x = Cell_ID, y = Xred)) +
geom_bar(stat = "identity", fill = "skyblue") +  # bars = difference values
geom_text(aes(label = round(Xred, 3)), vjust = -0.5, size = 3) +  # labels above bars
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +  # vertical x labels
labs(
title = "530/25,590/35",
x = "Sample (Cell_ID)",
y = "Fluoresence"
)
ggplotly(p2)
pe_fluor_joined<- joindf_by_id(pe_joined2, Fluor, "fluor_pe_joined.csv", key_df1 = "join_id", key_df2 = "Cell_ID")
View(pe_joined2)
View(pe_joined)
pe_fluor_joined<- joindf_by_id(pe_joined2, Fluor, "fluor_pe_joined.csv", key_df1 = "join_id", key_df2 = "Cell_ID")
View(pe_fluor_joined)
View(pe_fluor_joined)
joindf_by_id(pe_joined2, Fluor, "fluor_pe_joined.csv", key_df1 = "join_id", key_df2 = "Cell_ID")
View(pe_joined)
View(Fluor)
joindf_by_id(pe_joined2, Fluor, "fluor_pe_joined.csv", key_df1 = "join_id", key_df2 = "Cell_ID")
View(Fluor)
View(Fluor)
View(pe_joined2)
joindf_by_id(Fluor, pe_joined2, "fluor_pe_joined.csv", key_df1 = "join_id", key_df2 = "Cell_ID")
View(fluor_pe_joined)
View(Fluor)
Fluor<- %>% rename(Cell_ID = join_id)
Fluor <- Fluor %>% rename(Cell_ID = join_id)
Fluor <- Fluor %>% rename(join_id = Cell_ID)
fluor_pe_joined <- dplyr::left_join(Fluor, pe_joined2, by = "join_id")
View(fluor_pe_joined)
fluor_pe_joined <- dplyr::left_join(pe_joined2, Fluor, by = "join_id")
View(fluor_pe_joined)
install.packages("easystats")
install.packages("performance")
install.packages("parameters")
install.packages("broom")
source("G:/My Drive/ACES/Dissy/analysis/PE/process_plate_run.R")
y <- fluor_pe_joined$Xred
x <- fluor_pe_joined$PE_mg_per_g_sample
get_stats
get_stats <- function(model, label) {
tidy_mod <- tidy(model)
r2 <- round(performance::r2(model)$r2, 3)
p <- round(tidy_mod$p.value[2], 3)  # p-value for the x term
paste0(label, ": R²=", r2, ", p=", p)
}
# Fit several models
model_linear <- lm(Xred ~ PE_mg_per_g_sample, data = fluor_pe_joined)
model_log    <- lm(Xred ~ log(PE_mg_per_g_sample + 0.001), data = fluor_pe_joined)
model_poly   <- lm(Xred ~ PE_mg_per_g_sample + I(PE_mg_per_g_sample^2), data = fluor_pe_joined)
ann_linear <- get_stats(model_linear, "Linear")
ann_log    <- get_stats(model_log, "Log")
ann_poly   <- get_stats(model_poly, "Poly")
ggplot(fluor_pe_joined, aes(x = PE_mg_per_g_sample, y = Xred)) +
geom_point(alpha = 0.6) +
# Linear fit
stat_smooth(method = "lm", formula = y ~ x, se = FALSE, color = "blue", linetype = "solid") +
# Log fit
stat_smooth(method = "lm", formula = y ~ log(x + 0.001), se = FALSE, color = "green", linetype = "dashed") +
# Polynomial fit
stat_smooth(method = "lm", formula = y ~ x + I(x^2), se = FALSE, color = "red", linetype = "dotdash") +
# Annotations
annotate("text", x = Inf, y = Inf, label = ann_linear, hjust = 1.05, vjust = 2, color = "blue", size = 4) +
annotate("text", x = Inf, y = Inf, label = ann_log, hjust = 1.05, vjust = 3.5, color = "green", size = 4) +
annotate("text", x = Inf, y = Inf, label = ann_poly, hjust = 1.05, vjust = 5, color = "red", size = 4) +
theme_minimal() +
labs(title = "Regression Models of PE vs Fluoresence",
x = "PE_mg/g",
y = "Fluoresence 530/25,590/35
")
ann_linear <- get_stats(model_linear, "Linear")
ann_log    <- get_stats(model_log, "Log")
ann_poly   <- get_stats(model_poly, "Poly")
ggplot(fluor_pe_joined, aes(x = PE_mg_per_g_sample, y = Xred)) +
geom_point(alpha = 0.6) +
# Linear fit
stat_smooth(method = "lm", formula = y ~ x, se = FALSE, color = "blue", linetype = "solid") +
# Log fit
stat_smooth(method = "lm", formula = y ~ log(x + 0.001), se = FALSE, color = "green", linetype = "dashed") +
# Polynomial fit
stat_smooth(method = "lm", formula = y ~ x + I(x^2), se = FALSE, color = "red", linetype = "dotdash") +
# Annotations
annotate("text", x = Inf, y = Inf, label = ann_linear, hjust = 1.05, vjust = 2, color = "blue", size = 4) +
annotate("text", x = Inf, y = Inf, label = ann_log, hjust = 1.05, vjust = 3.5, color = "green", size = 4) +
annotate("text", x = Inf, y = Inf, label = ann_poly, hjust = 1.05, vjust = 5, color = "red", size = 4) +
theme_minimal() +
labs(title = "Regression Models of PE vs Fluoresence",
x = "PE_mg/g",
y = "Fluoresence 530/25,590/35
")
# Fit several models
model_linear <- lm(Xred ~ PE_mg_per_g_sample, data = fluor_pe_joined)
model_linear
model_log
get_stats(model_linear, "Linear")
get_stats <- function(model, label) {
stats <- glance(model)
r2 <- round(stats$r.squared, 3)
p <- round(tidy(model)$p.value[2], 3)  # second row = x term
paste0(label, ": R²=", r2, ", p=", p)
}
ann_linear <- get_stats(model_linear, "Linear")
ann_linear
ann_log    <- get_stats(model_log, "Log")
ann_log
ann_poly   <- get_stats(model_poly, "Poly")
ann_poly
ggplot(fluor_pe_joined, aes(x = PE_mg_per_g_sample, y = Xred)) +
geom_point(alpha = 0.6) +
# Linear fit
stat_smooth(method = "lm", formula = y ~ x, se = FALSE, color = "blue", linetype = "solid") +
# Log fit
stat_smooth(method = "lm", formula = y ~ log(x + 0.001), se = FALSE, color = "green", linetype = "dashed") +
# Polynomial fit
stat_smooth(method = "lm", formula = y ~ x + I(x^2), se = FALSE, color = "red", linetype = "dotdash") +
# Annotations
annotate("text", x = Inf, y = Inf, label = ann_linear, hjust = 1.05, vjust = 2, color = "blue", size = 4) +
annotate("text", x = Inf, y = Inf, label = ann_log, hjust = 1.05, vjust = 3.5, color = "green", size = 4) +
annotate("text", x = Inf, y = Inf, label = ann_poly, hjust = 1.05, vjust = 5, color = "red", size = 4) +
theme_minimal() +
labs(title = "Regression Models of PE vs Fluoresence",
x = "PE_mg/g",
y = "Fluoresence 530/25,590/35
")
analyze_replicates(fluor_pe_joined)
source("G:/My Drive/ACES/Dissy/analysis/PE/process_plate_run.R")
source("G:/My Drive/ACES/Dissy/analysis/PE/process_plate_run.R")
#Fluoresence data
Flor1 <-read_xlsx("Input PE/Flor_01_0508.xlsx")
getwd()
#Fluoresence data
Flor1 <-read_xlsx("/Input PE/Flor_01_0508.xlsx")
#
#
#
load_excel_files <- function(input_folder) {
# Ensure readxl is available
if (!requireNamespace("readxl", quietly = TRUE)) {
stop("The 'readxl' package is required but not installed. Please run install.packages('readxl')")
}
# List all .xls and .xlsx files in the folder
excel_files <- list.files(path = input_folder, pattern = "\\.xlsx?$", full.names = TRUE)
# Loop through and assign each file as an object named after the file (no extension)
for (file in excel_files) {
name <- tools::file_path_sans_ext(basename(file))
data <- readxl::read_excel(file)
assign(name, data, envir = .GlobalEnv)
}
message(length(excel_files), " Excel files loaded from ", input_folder)
}
load_excel_files("inputs")
load_excel_files("input PE")
getwd()
load_excel_files("/input PE")
load_excel_files("/input PE/")
list.files("Input PE")
load_excel_files("Input PE")
getwd()
setwd(wd)
load_excel_files("Input PE")
setwd(wd)
getwd()
wd
setwd(wd)
getwd()
install.packages("here")  # if not installed
library(here)
source("G:/My Drive/ACES/Dissy/analysis/PE/R/process_plate_run.R")
load_excel_files("Input PE")
source("G:/My Drive/ACES/Dissy/analysis/PE/R/process_plate_run.R")
load_excel_files("Input PE")
getwd()
