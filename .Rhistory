joindf_by_id(
df1          = PErep_enhanced,
df2          = `Sample data`,
output_name  = file.path(final_export_dir, "PErep_final.csv"),
unmatched_out = file.path(final_export_dir, "PErep_unmatched.csv"),
key_df1      = "ID",
key_df2      = "ID"
)
# 2. Join PErep_enhanced with Sample data
joindf_by_id(
df1          = PErep_enhanced,
df2          = `Sample data`,
output_name  = file.path(final_export_dir, "PErep_final.csv"),
unmatched_out = file.path(final_export_dir, "PErep_unmatched.csv"),
key_df1      = "ID",
key_df2      = "ID"
)
# 3. Read in the joined summary
PErep_final <- readr::read_csv(file.path(final_export_dir, "PErep_final.csv"))
# 4. Define output directory for replicate analysis plots
rep_plot_dir <- file.path("output PE", "plots", "replicate_analysis")
dir.create(rep_plot_dir, recursive = TRUE, showWarnings = FALSE)
# 5. Generate histogram with error bars for PE_mg_per_g_sample_mean
graph_replicates_custom_error(
data          = PErep_final,
id_col        = "join_id",
value_col     = "PE_mg_per_g_sample_mean",
se_col        = "PE_mg_per_g_sample_se",
output_prefix = file.path(rep_plot_dir, "E_rep_analy")
)
PE_location <- PErep_final %>%
filter(!Location %in% c("Lima Market Freeze Dry", "Ilo Freeze Dry", "Ilo oven dry", "Ilo Fresh", "Lima Market Fresh"))
PE_location_cham <- PErep_final %>%
filter(!variety %in% c("F.Glom"))
source("~/GitHub/TEdissy_analysis/process_plate_run.R")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# 1. Define the folder containing all Excel inputs
input_folder <- "Input_prot"
# 2. Find all .xlsx files (full paths), excluding temp files that start with "~$"
excel_files <- list.files(
path = input_folder,
pattern = "\\.xlsx?$",
full.names = TRUE
)
excel_files <- excel_files[!grepl("^~\\$", basename(excel_files))]
# 3. Loop over each file
for (file in excel_files) {
# 3a. Create a clean object name (strip out folder & extension)
name <- tools::file_path_sans_ext(basename(file))
# 3b. Determine which sheet to read (second if possible, otherwise first)
sheet_names   <- excel_sheets(file)
sheet_to_read <- if (length(sheet_names) >= 2) sheet_names[2] else sheet_names[1]
# 3c. Read the chosen sheet, suppressing verbose messages
data <- suppressMessages(read_excel(file, sheet = sheet_to_read))
# 3d. Assign the data.frame to the global environment under "name"
assign(name, data, envir = .GlobalEnv)
# 3e. Print a message to confirm successful load
message("Loaded: ", name, " (sheet = '", sheet_to_read, "')")
}
# Source script from top-level project folder
source("../process_plate_run.R")
# 1. Define the folder containing all Excel inputs
input_folder <- "Input_prot"
# 2. Find all .xlsx files (full paths), excluding temp files that start with "~$"
excel_files <- list.files(
path = input_folder,
pattern = "\\.xlsx?$",
full.names = TRUE
)
excel_files <- excel_files[!grepl("^~\\$", basename(excel_files))]
# 3. Loop over each file
for (file in excel_files) {
# 3a. Create a clean object name (strip out folder & extension)
name <- tools::file_path_sans_ext(basename(file))
# 3b. Determine which sheet to read (second if possible, otherwise first)
sheet_names   <- excel_sheets(file)
sheet_to_read <- if (length(sheet_names) >= 2) sheet_names[2] else sheet_names[1]
# 3c. Read the chosen sheet, suppressing verbose messages
data <- suppressMessages(read_excel(file, sheet = sheet_to_read))
# 3d. Assign the data.frame to the global environment under "name"
assign(name, data, envir = .GlobalEnv)
# 3e. Print a message to confirm successful load
message("Loaded: ", name, " (sheet = '", sheet_to_read, "')")
}
# 1. Define the folder containing all Excel inputs
input_folder <- "Input_prot"
# 2. Find all .xlsx files (full paths), excluding temp files that start with "~$"
excel_files <- list.files(
path = input_folder,
pattern = "\\.xlsx?$",
full.names = TRUE
)
excel_files <- excel_files[!grepl("^~\\$", basename(excel_files))]
# 3. Loop over each file
for (file in excel_files) {
# 3a. Create a clean object name (strip out folder & extension)
name <- tools::file_path_sans_ext(basename(file))
# 3b. Determine which sheet to read (second if possible, otherwise first)
sheet_names   <- excel_sheets(file)
sheet_to_read <- if (length(sheet_names) >= 2) sheet_names[2] else sheet_names[1]
# 3c. Read the chosen sheet, suppressing verbose messages
data <- suppressMessages(read_excel(file, sheet = sheet_to_read))
# 3d. Assign the data.frame to the global environment under "name"
assign(name, data, envir = .GlobalEnv)
# 3e. Print a message to confirm successful load
message("Loaded: ", name, " (sheet = '", sheet_to_read, "')")
}
# 1. Define which wells were used as blanks in each run
blanks1 <- c("A01", "A02", "A03")
blanks2 <- c("H11", "H12")
# 2. Build named lists of raw datasets and their corresponding blank vectors
listprot    <- list(pr1 = pr1, pr2 = pr2)
#
listBlanks <- list(blanks1, blanks2)
#
# 3. Run the wrapper: it calls tidy_and_correct() on each dataset
tidy_all(listprot, listBlanks)  # Produces PE1_tidy, PE2_tidy, PE3_tidy, PE4_tidy
# 1. Create output subdirectory
save_dir <- file.path("output_prot", "export data", "joined_weights_prot")
dir.create(save_dir, recursive = TRUE, showWarnings = FALSE)
# 2. Build weight and PE data frame lists
list_weights <- list(
pr1_weights,
pr2_weights
)
pr_list <- list(
PE1 = pr1_tidy,
PE2 = Pr2_tidy
)
pr_list <- list(
PE1 = pr1_tidy,
PE2 = pr2_tidy
)
# 3. Loop and join
mapply(
function(df1, df2, name) {
joindf_by_id(
df1          = df1,
df2          = df2,
output_name  = file.path(save_dir, paste0(name, "_weights_joined.csv")),
unmatched_out = file.path(save_dir, paste0(name, "_weights_unmatched.csv")),
key_df1      = "Cell_ID",
key_df2      = "plate well"
)
},
df1 = pr_list,
df2 = list_weights,
name = names(PE_list),
SIMPLIFY = FALSE
)
# 3. Loop and join
mapply(
function(df1, df2, name) {
joindf_by_id(
df1          = df1,
df2          = df2,
output_name  = file.path(save_dir, paste0(name, "_weights_joined.csv")),
unmatched_out = file.path(save_dir, paste0(name, "_weights_unmatched.csv")),
key_df1      = "Cell_ID",
key_df2      = "plate well"
)
},
df1 = pr_list,
df2 = list_weights,
name = names(pr_list),
SIMPLIFY = FALSE
)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Source script from top-level project folder
source("../process_plate_run.R")
#
# 1. Define the folder containing all Excel inputs
input_folder <- "Input_prot"
# 2. Find all .xlsx files (full paths), excluding temp files that start with "~$"
excel_files <- list.files(
path = input_folder,
pattern = "\\.xlsx?$",
full.names = TRUE
)
excel_files <- excel_files[!grepl("^~\\$", basename(excel_files))]
# 3. Loop over each file
for (file in excel_files) {
# 3a. Create a clean object name (strip out folder & extension)
name <- tools::file_path_sans_ext(basename(file))
# 3b. Determine which sheet to read (second if possible, otherwise first)
sheet_names   <- excel_sheets(file)
sheet_to_read <- if (length(sheet_names) >= 2) sheet_names[2] else sheet_names[1]
# 3c. Read the chosen sheet, suppressing verbose messages
data <- suppressMessages(read_excel(file, sheet = sheet_to_read))
# 3d. Assign the data.frame to the global environment under "name"
assign(name, data, envir = .GlobalEnv)
# 3e. Print a message to confirm successful load
message("Loaded: ", name, " (sheet = '", sheet_to_read, "')")
}
# 1. Define which wells were used as blanks in each run
blanks1 <- c("A01", "A02", "A03")
blanks2 <- c("H11", "H12")
#
# 2. Build named lists of raw datasets and their corresponding blank vectors
listprot    <- list(pr1 = pr1, pr2 = pr2)
#
listBlanks <- list(blanks1, blanks2)
#
# 3. Run the wrapper: it calls tidy_and_correct() on each dataset
tidy_all(listprot, listBlanks)  # Produces PE1_tidy, PE2_tidy, PE3_tidy, PE4_tidy
# 1. Create output subdirectory
save_dir <- file.path("output_prot", "export data", "joined_weights_prot")
dir.create(save_dir, recursive = TRUE, showWarnings = FALSE)
# 2. Build weight and PE data frame lists
list_weights <- list(
pr1_weights,
pr2_weights
)
pr_list <- list(
PE1 = pr1_tidy,
PE2 = pr2_tidy
)
# 3. Loop and join
mapply(
function(df1, df2, name) {
joindf_by_id(
df1          = df1,
df2          = df2,
output_name  = file.path(save_dir, paste0(name, "_weights_joined.csv")),
unmatched_out = file.path(save_dir, paste0(name, "_weights_unmatched.csv")),
key_df1      = "Cell_ID",
key_df2      = "plate well"
)
},
df1 = pr_list,
df2 = list_weights,
name = names(pr_list),
SIMPLIFY = FALSE
)
View(pr1_tidy)
View(pr2_tidy)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Source script from top-level project folder
source("../process_plate_run.R")
#
# 1. Define the folder containing all Excel inputs
input_folder <- "Input_prot"
# 2. Find all .xlsx files (full paths), excluding temp files that start with "~$"
excel_files <- list.files(
path = input_folder,
pattern = "\\.xlsx?$",
full.names = TRUE
)
excel_files <- excel_files[!grepl("^~\\$", basename(excel_files))]
# 3. Loop over each file
for (file in excel_files) {
# 3a. Create a clean object name (strip out folder & extension)
name <- tools::file_path_sans_ext(basename(file))
# 3b. Determine which sheet to read (second if possible, otherwise first)
sheet_names   <- excel_sheets(file)
sheet_to_read <- if (length(sheet_names) >= 2) sheet_names[2] else sheet_names[1]
# 3c. Read the chosen sheet, suppressing verbose messages
data <- suppressMessages(read_excel(file, sheet = sheet_to_read))
# 3d. Assign the data.frame to the global environment under "name"
assign(name, data, envir = .GlobalEnv)
# 3e. Print a message to confirm successful load
message("Loaded: ", name, " (sheet = '", sheet_to_read, "')")
}
# 1. Define which wells were used as blanks in each run
blanks1 <- c("A01", "A02", "A03")
blanks2 <- c("H11", "H12")
#
# 2. Build named lists of raw datasets and their corresponding blank vectors
listprot    <- list(pr1 = pr1, pr2 = pr2)
#
listBlanks <- list(blanks1, blanks2)
#
# 3. Run the wrapper: it calls tidy_and_correct() on each dataset
tidy_all(listprot, listBlanks)  # Produces PE1_tidy, PE2_tidy, PE3_tidy, PE4_tidy
# 1. Create output subdirectory
save_dir <- file.path("output_prot", "export data", "joined_weights_prot")
dir.create(save_dir, recursive = TRUE, showWarnings = FALSE)
# 2. Build weight and PE data frame lists
list_weights <- list(
pr1_weights,
pr2_weights
)
pr_list <- list(
PE1 = pr1_tidy,
PE2 = pr2_tidy
)
# 1. Create output subdirectory
save_dir <- file.path("output_prot", "export data", "joined_weights_prot")
dir.create(save_dir, recursive = TRUE, showWarnings = FALSE)
# 2. Build weight and PE data frame lists
list_weights <- list(
pr1_weights,
pr2_weights
)
pr_list <- list(
PE1 = pr1_tidy,
PE2 = pr2_tidy
)
# 3. Loop and join
mapply(
function(df1, df2, name) {
joindf_by_id(
df1          = df1,
df2          = df2,
output_name  = file.path(save_dir, paste0(name, "_weights_joined.csv")),
unmatched_out = file.path(save_dir, paste0(name, "_weights_unmatched.csv")),
key_df1      = "Cell_ID",
key_df2      = "plate well"
)
},
df1 = pr_list,
df2 = list_weights,
name = names(pr_list),
SIMPLIFY = FALSE
)
View(pr2_weights)
# 2. Build weight and PE data frame lists
list_weights <- list(
pr1_weights,
pr2_weights
)
pr_list <- list(
pr1 = pr1_tidy,
pr2 = pr2_tidy
)
# 3. Loop and join
mapply(
function(df1, df2, name) {
joindf_by_id(
df1          = df1,
df2          = df2,
output_name  = file.path(save_dir, paste0(name, "_weights_joined.csv")),
unmatched_out = file.path(save_dir, paste0(name, "_weights_unmatched.csv")),
key_df1      = "Cell_ID",
key_df2      = "plate well"
)
},
df1 = pr_list,
df2 = list_weights,
name = names(pr_list),
SIMPLIFY = FALSE
)
View(pr2_weights_joined)
#
#
#
#
#
#
#
#
#
#
create_lowry_calibration <- function(df,
sample_col = "sample_id",
absorbance_col = "absorbance") {
library(dplyr)
library(ggplot2)
# Filter out standard entries and extract concentration
df_standards <- df %>%
filter(grepl("^ST_", .data[[sample_col]])) %>%
mutate(
concentration = as.numeric(gsub("ST_", "", .data[[sample_col]])),
absorbance = as.numeric(.data[[absorbance_col]])
)
# Fit linear model
model <- lm(absorbance ~ concentration, data = df_standards)
# Plot
p <- ggplot(df_standards, aes(x = concentration, y = absorbance)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(
title = "Lowry Calibration Curve",
x = "BSA Concentration (mg/mL)",
y = "Absorbance"
) +
theme_minimal()
list(model = model, plot = p)
}
source("~/GitHub/TEdissy_analysis/process_plate_run.R")
concentration_mg_per_ml = c(0, 1.2, 2.4, 3, 3.6, 4.8)
result <- create_lowry_calibration(pr2_weights_joined)
View(pr2_weights_joined)
result <- create_lowry_calibration(pr2_weights_joined, sample_col = "ID",
absorbance_col = "X600")
print(result$plot)
View(pr1_tidy)
View(pr1_weights_joined)
View(pr2_weights_joined)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Source script from top-level project folder
source("../process_plate_run.R")
#
# 1. Define the folder containing all Excel inputs
input_folder <- "Input_prot"
# 2. Find all .xlsx files (full paths), excluding temp files that start with "~$"
excel_files <- list.files(
path = input_folder,
pattern = "\\.xlsx?$",
full.names = TRUE
)
excel_files <- excel_files[!grepl("^~\\$", basename(excel_files))]
# 3. Loop over each file
for (file in excel_files) {
# 3a. Create a clean object name (strip out folder & extension)
name <- tools::file_path_sans_ext(basename(file))
# 3b. Determine which sheet to read (second if possible, otherwise first)
sheet_names   <- excel_sheets(file)
sheet_to_read <- if (length(sheet_names) >= 2) sheet_names[2] else sheet_names[1]
# 3c. Read the chosen sheet, suppressing verbose messages
data <- suppressMessages(read_excel(file, sheet = sheet_to_read))
# 3d. Assign the data.frame to the global environment under "name"
assign(name, data, envir = .GlobalEnv)
# 3e. Print a message to confirm successful load
message("Loaded: ", name, " (sheet = '", sheet_to_read, "')")
}
# 1. Define which wells were used as blanks in each run
blanks1 <- c("A01", "A02", "A03")
blanks2 <- c("H11", "H12")
#
# 2. Build named lists of raw datasets and their corresponding blank vectors
listprot    <- list(pr1 = pr1, pr2 = pr2)
#
listBlanks <- list(blanks1, blanks2)
#
# 3. Run the wrapper: it calls tidy_and_correct() on each dataset
tidy_all(listprot, listBlanks)  # Produces PE1_tidy, PE2_tidy, PE3_tidy, PE4_tidy
# 1. Create output subdirectory
save_dir <- file.path("output_prot", "export data", "joined_weights_prot")
dir.create(save_dir, recursive = TRUE, showWarnings = FALSE)
# 2. Build weight and PE data frame lists
list_weights <- list(
pr1_weights,
pr2_weights
)
pr_list <- list(
pr1 = pr1_tidy,
pr2 = pr2_tidy
)
# 3. Loop and join
mapply(
function(df1, df2, name) {
joindf_by_id(
df1          = df1,
df2          = df2,
output_name  = file.path(save_dir, paste0(name, "_weights_joined.csv")),
unmatched_out = file.path(save_dir, paste0(name, "_weights_unmatched.csv")),
key_df1      = "Cell_ID",
key_df2      = "plate well"
)
},
df1 = pr_list,
df2 = list_weights,
name = names(pr_list),
SIMPLIFY = FALSE
)
View(calibration_prot)
# Fit linear model
model <- lm(X600_cor ~ concentration, data = calibration_prot)
# Summary of the model (for table output, if needed)
summary(model)
# Plot
ggplot(standards, aes(x = Concentration, y = Absorbance)) +
geom_point(size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(
title = "Protein Standard Curve (Lowry Method)",
x = "Protein Concentration (mg/mL)",
y = "Absorbance (600 nm)"
) +
annotate(
"text", x = max(standards$Concentration) * 0.5,
y = max(standards$Absorbance) * 0.9,
label = paste0("y = ", round(coef(model)[2], 4), "x + ", round(coef(model)[1], 4),
"\nR² = ", round(summary(model)$r.squared, 4)),
size = 4, hjust = 0
) +
theme_minimal()
# Plot
ggplot(calibration_prot, aes(x = concentration, y = X600_cor)) +
geom_point(size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(
title = "Protein Standard Curve (Lowry Method)",
x = "Protein Concentration (mg/mL)",
y = "Absorbance (600 nm)"
) +
annotate(
"text", x = max(standards$Concentration) * 0.5,
y = max(standards$Absorbance) * 0.9,
label = paste0("y = ", round(coef(model)[2], 4), "x + ", round(coef(model)[1], 4),
"\nR² = ", round(summary(model)$r.squared, 4)),
size = 4, hjust = 0
) +
theme_minimal()
# Plot
ggplot(calibration_prot, aes(x = concentration, y = X600_cor)) +
geom_point(size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(
title = "Protein Standard Curve (Lowry Method)",
x = "Protein Concentration (mg/mL)",
y = "Absorbance (600 nm)"
) +
annotate(
"text", x = max(calibration_prot$concentration) * 0.5,
y = max(calibration_prot$X600_cor) * 0.9,
label = paste0("y = ", round(coef(model)[2], 4), "x + ", round(coef(model)[1], 4),
"\nR² = ", round(summary(model)$r.squared, 4)),
size = 4, hjust = 0
) +
theme_minimal()
