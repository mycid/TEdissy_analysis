pr2_weights
)
pr_list <- list(
pr1 = pr1_tidy,
pr2 = pr2_tidy
)
# 3. Join + save using joindf_by_id and your output file paths
mapply(
function(df1, df2, name) {
# Construct full file paths
joined_path   <- file.path(joined_weights_dir, paste0(name, "_weights_joined.csv"))
unmatched_path <- file.path(joined_weights_dir, paste0(name, "_weights_unmatched.csv"))
# Call your existing function
joindf_by_id(
df1           = df1,
df2           = df2,
output_name   = joined_path,
unmatched_out = unmatched_path,
key_df1       = "Cell_ID",
key_df2       = "plate well"
)
},
df1 = pr_list,
df2 = list_weights,
name = names(pr_list),
SIMPLIFY = FALSE
)
```{r standard-curve, message=FALSE, warning=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Source script from top-level project folder
source("../process_plate_run.R")
#— 1. pull from params (or use defaults)
plot_dir   <- params$plot_dir   %||% "output_prot/plots"
data_dir   <- params$data_dir   %||% "output_prot/export_data"
report_dir <- params$report_dir %||% "output_prot/reports"
#— 2. create all dirs
walk(
c(plot = plot_dir, data = data_dir, reports = report_dir),
~ if (!dir_exists(.x)) dir_create(.x, recurse = TRUE)
)
#— 3. register plot_dir with knitr
opts_chunk$set(fig.path = paste0(plot_dir, "/"))
#
# 1. Define the folder containing all Excel inputs
input_folder <- "Input_prot"
# 2. Find all .xlsx files (full paths), excluding temp files that start with "~$"
excel_files <- list.files(
path = input_folder,
pattern = "\\.xlsx?$",
full.names = TRUE
)
excel_files <- excel_files[!grepl("^~\\$", basename(excel_files))]
# 3. Loop over each file
for (file in excel_files) {
# 3a. Create a clean object name (strip out folder & extension)
name <- tools::file_path_sans_ext(basename(file))
# 3b. Determine which sheet to read (second if possible, otherwise first)
sheet_names   <- excel_sheets(file)
sheet_to_read <- if (length(sheet_names) >= 2) sheet_names[2] else sheet_names[1]
# 3c. Read the chosen sheet, suppressing verbose messages
data <- suppressMessages(read_excel(file, sheet = sheet_to_read))
# 3d. Assign the data.frame to the global environment under "name"
assign(name, data, envir = .GlobalEnv)
# 3e. Print a message to confirm successful load
message("Loaded: ", name, " (sheet = '", sheet_to_read, "')")
}
# 1. Define which wells were used as blanks in each run
blanks1 <- c("A01", "A02", "A03")
blanks2 <- c("H11", "H12")
#
# 2. Build named lists of raw datasets and their corresponding blank vectors
listprot    <- list(pr1 = pr1, pr2 = pr2)
#
listBlanks <- list(blanks1, blanks2)
#
# 3. Run the wrapper: it calls tidy_and_correct() on each dataset
tidy_all(listprot, listBlanks)
# 1. Create output subdirectory
# 1. Create subdirectory for joined weights inside data_dir
joined_weights_dir <- file.path(data_dir, "joined_weights_prot")
if (!dir_exists(joined_weights_dir)) dir_create(joined_weights_dir, recurse = TRUE)
# 2. Build weight and PE data frame lists
list_weights <- list(
pr1_weights,
pr2_weights
)
pr_list <- list(
pr1 = pr1_tidy,
pr2 = pr2_tidy
)
# 3. Loop and join, saving with save_object()
# 1. Define subfolder to store joined weights
joined_weights_dir <- file.path(data_dir, "joined_weights_prot")
dir_create(joined_weights_dir, recurse = TRUE)
# 2. Define weight and PE data frame lists
list_weights <- list(
pr1_weights,
pr2_weights
)
pr_list <- list(
pr1 = pr1_tidy,
pr2 = pr2_tidy
)
# 3. Join + save using joindf_by_id and your output file paths
mapply(
function(df1, df2, name) {
# Construct full file paths
joined_path   <- file.path(joined_weights_dir, paste0(name, "_weights_joined.csv"))
unmatched_path <- file.path(joined_weights_dir, paste0(name, "_weights_unmatched.csv"))
# Call your existing function
joindf_by_id(
df1           = df1,
df2           = df2,
output_name   = joined_path,
unmatched_out = unmatched_path,
key_df1       = "Cell_ID",
key_df2       = "plate well"
)
},
df1 = pr_list,
df2 = list_weights,
name = names(pr_list),
SIMPLIFY = FALSE
)
# Example data: Replace this with your actual data
# You can also use `read.csv("your_data.csv")` if loading from a file
# Fit linear model
model <- lm(X600_cor ~ concentration, data = calibration_prot)
# Summary of the model (for table output, if needed)
summary(model)
# Plot
prot_curve_plot <- ggplot(calibration_prot, aes(x = concentration, y = X600_cor)) +
geom_point(size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(
title = "Protein Standard Curve (Lowry Method)",
x = "Protein Concentration (mg/mL)",
y = "Absorbance (600 nm)"
) +
annotate(
"text",
x = max(calibration_prot$concentration) * 0.5,
y = max(calibration_prot$X600_cor) * 0.9,
label = paste0("y = ", round(coef(model)[2], 4), "x + ", round(coef(model)[1], 4),
"\nR² = ", round(summary(model)$r.squared, 4)),
size = 4, hjust = 0
) +
theme_minimal()
# Save using save_object()
save_object(prot_curve_plot,
filename  = "protein_standard_curve",
directory = "plots",
width     = 6,
height    = 5,
dpi       = 300)
print(prot_curve_plot)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Source script from top-level project folder
source("../process_plate_run.R")
#— 1. pull from params (or use defaults)
plot_dir   <- params$plot_dir   %||% "output_prot/plots"
data_dir   <- params$data_dir   %||% "output_prot/export_data"
report_dir <- params$report_dir %||% "output_prot/reports"
#— 2. create all dirs
walk(
c(plot = plot_dir, data = data_dir, reports = report_dir),
~ if (!dir_exists(.x)) dir_create(.x, recurse = TRUE)
)
#— 3. register plot_dir with knitr
opts_chunk$set(fig.path = paste0(plot_dir, "/"))
#
# 1. Define the folder containing all Excel inputs
input_folder <- "Input_prot"
# 2. Find all .xlsx files (full paths), excluding temp files that start with "~$"
excel_files <- list.files(
path = input_folder,
pattern = "\\.xlsx?$",
full.names = TRUE
)
excel_files <- excel_files[!grepl("^~\\$", basename(excel_files))]
# 3. Loop over each file
for (file in excel_files) {
# 3a. Create a clean object name (strip out folder & extension)
name <- tools::file_path_sans_ext(basename(file))
# 3b. Determine which sheet to read (second if possible, otherwise first)
sheet_names   <- excel_sheets(file)
sheet_to_read <- if (length(sheet_names) >= 2) sheet_names[2] else sheet_names[1]
# 3c. Read the chosen sheet, suppressing verbose messages
data <- suppressMessages(read_excel(file, sheet = sheet_to_read))
# 3d. Assign the data.frame to the global environment under "name"
assign(name, data, envir = .GlobalEnv)
# 3e. Print a message to confirm successful load
message("Loaded: ", name, " (sheet = '", sheet_to_read, "')")
}
# 1. Define which wells were used as blanks in each run
blanks1 <- c("A01", "A02", "A03")
blanks2 <- c("H11", "H12")
#
# 2. Build named lists of raw datasets and their corresponding blank vectors
listprot    <- list(pr1 = pr1, pr2 = pr2)
#
listBlanks <- list(blanks1, blanks2)
#
# 3. Run the wrapper: it calls tidy_and_correct() on each dataset
tidy_all(listprot, listBlanks)
# 1. Create output subdirectory
# 1. Create subdirectory for joined weights inside data_dir
joined_weights_dir <- file.path(data_dir, "joined_weights_prot")
if (!dir_exists(joined_weights_dir)) dir_create(joined_weights_dir, recurse = TRUE)
# 2. Build weight and PE data frame lists
list_weights <- list(
pr1_weights,
pr2_weights
)
pr_list <- list(
pr1 = pr1_tidy,
pr2 = pr2_tidy
)
# 3. Loop and join, saving with save_object()
# 1. Define subfolder to store joined weights
joined_weights_dir <- file.path(data_dir, "joined_weights_prot")
dir_create(joined_weights_dir, recurse = TRUE)
# 2. Define weight and PE data frame lists
list_weights <- list(
pr1_weights,
pr2_weights
)
pr_list <- list(
pr1 = pr1_tidy,
pr2 = pr2_tidy
)
# 3. Join + save using joindf_by_id and your output file paths
mapply(
function(df1, df2, name) {
# Construct full file paths
joined_path   <- file.path(joined_weights_dir, paste0(name, "_weights_joined.csv"))
unmatched_path <- file.path(joined_weights_dir, paste0(name, "_weights_unmatched.csv"))
# Call your existing function
joindf_by_id(
df1           = df1,
df2           = df2,
output_name   = joined_path,
unmatched_out = unmatched_path,
key_df1       = "Cell_ID",
key_df2       = "plate well"
)
},
df1 = pr_list,
df2 = list_weights,
name = names(pr_list),
SIMPLIFY = FALSE
)
# Example data: Replace this with your actual data
# You can also use `read.csv("your_data.csv")` if loading from a file
# Fit linear model
model <- lm(X600_cor ~ concentration, data = calibration_prot)
# Summary of the model (for table output, if needed)
summary(model)
# Plot
prot_curve_plot <- ggplot(calibration_prot, aes(x = concentration, y = X600_cor)) +
geom_point(size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(
title = "Protein Standard Curve (Lowry Method)",
x = "Protein Concentration (mg/mL)",
y = "Absorbance (600 nm)"
) +
annotate(
"text",
x = max(calibration_prot$concentration) * 0.5,
y = max(calibration_prot$X600_cor) * 0.9,
label = paste0("y = ", round(coef(model)[2], 4), "x + ", round(coef(model)[1], 4),
"\nR² = ", round(summary(model)$r.squared, 4)),
size = 4, hjust = 0
) +
theme_minimal()
# Save using save_object()
save_object(prot_curve_plot,
filename  = "protein_standard_curve",
directory = "plots",
width     = 6,
height    = 5,
dpi       = 300)
print(prot_curve_plot)
# 1. Find common columns
common_cols <- intersect(names(pr2_weights_joined), names(pr1_weights_joined))
# 2. Subset and bind
df_combined <- bind_rows(pr2_weights_joined[common_cols], pr1_weights_joined[common_cols])
# Force both weights columns to numeric
pr1_weights_joined <- pr1_weights_joined %>% mutate(weights = as.numeric(weights))
pr2_weights_joined <- pr2_weights_joined %>% mutate(weights = as.numeric(weights))
# 2. Subset and bind
df_combined <- bind_rows(pr2_weights_joined[common_cols], pr1_weights_joined[common_cols])
# Fix the dates
pr1_weights_joined <- pr1_weights_joined %>%
mutate(date = dmy(as.character(date)))  # convert character → Date (dd/mm/yyyy)
pr2_weights_joined <- pr2_weights_joined %>%
mutate(date = dmy(as.character(date)))  # also force to Date with EU format
# 2. Subset and bind
df_combined <- bind_rows(pr2_weights_joined[common_cols], pr1_weights_joined[common_cols])
pr_combined <- bind_rows(pr2_weights_joined[common_cols], pr1_weights_joined[common_cols])
pr_combined$con_mg_per_ml <- (pr1_weights_joined$X600 - intercept) / slope
View(pr_combined)
pr_combined$con_mg_per_ml <- (pr_combined$X600 - intercept) / slope
# ---- Step 4: Convert to total protein in extract (500 µL = 0.5 mL)
# First, calculate protein in the well (20 µL = 0.02 mL), then scale
pr_combined$Protein_mg_total <- pr_combined$Conc_mg_per_mL * 0.5  # total protein in extract
# ---- Step 4: Convert to total protein in extract (500 µL = 0.5 mL)
# First, calculate protein in the well (20 µL = 0.02 mL), then scale
pr_combined$Protein_mg_total <- pr_combined$conc_mg_per_mL * 0.5  # total protein in extract
# ---- Step 4: Convert to total protein in extract (500 µL = 0.5 mL)
# First, calculate protein in the well (20 µL = 0.02 mL), then scale
pr_combined$Protein_mg_total <- pr_combined$con_mg_per_mL * 0.5  # total protein in extract
# ---- Step 4: Convert to total protein in extract (500 µL = 0.5 mL)
# First, calculate protein in the well (20 µL = 0.02 mL), then scale
pr_combined$Protein_mg_total <- pr_combined$con_mg_per_ml * 0.5  # total protein in extract
# ---- Step 5: Convert to mg protein per g sample
pr_combined$Protein_mg_per_g <- (samples$Protein_mg_total / samples$weight) * 1000
# ---- Step 5: Convert to mg protein per g sample
pr_combined$Protein_mg_per_g <- (pr_combined$Protein_mg_total / samples$weight) * 1000
# ---- Step 5: Convert to mg protein per g sample
pr_combined$Protein_mg_per_g <- (pr_combined$Protein_mg_total / pr_combined$weight) * 1000
View(pr1_weights)
# 1. Create output subdirectory
# 1. Create subdirectory for joined weights inside data_dir
joined_weights_dir <- file.path(data_dir, "joined_weights_prot")
if (!dir_exists(joined_weights_dir)) dir_create(joined_weights_dir, recurse = TRUE)
# 2. Build weight and PE data frame lists
list_weights <- list(
pr1_weights,
pr2_weights
)
pr_list <- list(
pr1 = pr1_tidy,
pr2 = pr2_tidy
)
# 3. Loop and join, saving with save_object()
# 1. Define subfolder to store joined weights
joined_weights_dir <- file.path(data_dir, "joined_weights_prot")
# 3. Join + save using joindf_by_id and your output file paths
mapply(
function(df1, df2, name) {
# Construct full file paths
joined_path   <- file.path(joined_weights_dir, paste0(name, "_weights_joined.csv"))
unmatched_path <- file.path(joined_weights_dir, paste0(name, "_weights_unmatched.csv"))
# Call your existing function
joindf_by_id(
df1           = df1,
df2           = df2,
output_name   = joined_path,
unmatched_out = unmatched_path,
key_df1       = "Cell_ID",
key_df2       = "plate well"
)
},
df1 = pr_list,
df2 = list_weights,
name = names(pr_list),
SIMPLIFY = FALSE
)
View(pr2_weights)
View(pr1_weights)
View(pr2_weights)
# 1. Create output subdirectory
# 1. Create subdirectory for joined weights inside data_dir
joined_weights_dir <- file.path(data_dir, "joined_weights_prot")
if (!dir_exists(joined_weights_dir)) dir_create(joined_weights_dir, recurse = TRUE)
# 2. Build weight and PE data frame lists
list_weights <- list(
pr1_weights,
pr2_weights
)
pr_list <- list(
pr1 = pr1_tidy,
pr2 = pr2_tidy
)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Source script from top-level project folder
source("../process_plate_run.R")
#— 1. pull from params (or use defaults)
plot_dir   <- params$plot_dir   %||% "output_prot/plots"
data_dir   <- params$data_dir   %||% "output_prot/export_data"
report_dir <- params$report_dir %||% "output_prot/reports"
#— 2. create all dirs
walk(
c(plot = plot_dir, data = data_dir, reports = report_dir),
~ if (!dir_exists(.x)) dir_create(.x, recurse = TRUE)
)
#— 3. register plot_dir with knitr
opts_chunk$set(fig.path = paste0(plot_dir, "/"))
#
# 1. Define the folder containing all Excel inputs
input_folder <- "Input_prot"
# 2. Find all .xlsx files (full paths), excluding temp files that start with "~$"
excel_files <- list.files(
path = input_folder,
pattern = "\\.xlsx?$",
full.names = TRUE
)
excel_files <- excel_files[!grepl("^~\\$", basename(excel_files))]
# 3. Loop over each file
for (file in excel_files) {
# 3a. Create a clean object name (strip out folder & extension)
name <- tools::file_path_sans_ext(basename(file))
# 3b. Determine which sheet to read (second if possible, otherwise first)
sheet_names   <- excel_sheets(file)
sheet_to_read <- if (length(sheet_names) >= 2) sheet_names[2] else sheet_names[1]
# 3c. Read the chosen sheet, suppressing verbose messages
data <- suppressMessages(read_excel(file, sheet = sheet_to_read))
# 3d. Assign the data.frame to the global environment under "name"
assign(name, data, envir = .GlobalEnv)
# 3e. Print a message to confirm successful load
message("Loaded: ", name, " (sheet = '", sheet_to_read, "')")
}
# 1. Define which wells were used as blanks in each run
blanks1 <- c("A01", "A02", "A03")
blanks2 <- c("H11", "H12")
#
# 2. Build named lists of raw datasets and their corresponding blank vectors
listprot    <- list(pr1 = pr1, pr2 = pr2)
#
listBlanks <- list(blanks1, blanks2)
#
# 3. Run the wrapper: it calls tidy_and_correct() on each dataset
tidy_all(listprot, listBlanks)
# 1. Create output subdirectory
# 1. Create subdirectory for joined weights inside data_dir
joined_weights_dir <- file.path(data_dir, "joined_weights_prot")
if (!dir_exists(joined_weights_dir)) dir_create(joined_weights_dir, recurse = TRUE)
# 2. Build weight and PE data frame lists
list_weights <- list(
pr1_weights,
pr2_weights
)
pr_list <- list(
pr1 = pr1_tidy,
pr2 = pr2_tidy
)
# 3. Join + save using joindf_by_id and your output file paths
mapply(
function(df1, df2, name) {
# Construct full file paths
joined_path   <- file.path(joined_weights_dir, paste0(name, "_weights_joined.csv"))
unmatched_path <- file.path(joined_weights_dir, paste0(name, "_weights_unmatched.csv"))
# Call your existing function
joindf_by_id(
df1           = df1,
df2           = df2,
output_name   = joined_path,
unmatched_out = unmatched_path,
key_df1       = "Cell_ID",
key_df2       = "plate well"
)
},
df1 = pr_list,
df2 = list_weights,
name = names(pr_list),
SIMPLIFY = FALSE
)
# Example data: Replace this with your actual data
# You can also use `read.csv("your_data.csv")` if loading from a file
# Fit linear model
model <- lm(X600_cor ~ concentration, data = calibration_prot)
# Summary of the model (for table output, if needed)
summary(model)
# Plot
prot_curve_plot <- ggplot(calibration_prot, aes(x = concentration, y = X600_cor)) +
geom_point(size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(
title = "Protein Standard Curve (Lowry Method)",
x = "Protein Concentration (mg/mL)",
y = "Absorbance (600 nm)"
) +
annotate(
"text",
x = max(calibration_prot$concentration) * 0.5,
y = max(calibration_prot$X600_cor) * 0.9,
label = paste0("y = ", round(coef(model)[2], 4), "x + ", round(coef(model)[1], 4),
"\nR² = ", round(summary(model)$r.squared, 4)),
size = 4, hjust = 0
) +
theme_minimal()
# Save using save_object()
save_object(prot_curve_plot,
filename  = "protein_standard_curve",
directory = "plots",
width     = 6,
height    = 5,
dpi       = 300)
print(prot_curve_plot)
# Use the regression model to predict concentration from absorbance
# Rearranged formula: concentration = (absorbance - intercept) / slope
intercept <- coef(model)[1]
slope     <- coef(model)[2]
# 1. Find common columns
common_cols <- intersect(names(pr2_weights_joined), names(pr1_weights_joined))
# Force both weights columns to numeric
pr1_weights_joined <- pr1_weights_joined %>% mutate(weights = as.numeric(weights))
pr2_weights_joined <- pr2_weights_joined %>% mutate(weights = as.numeric(weights))
# Fix the dates
pr1_weights_joined <- pr1_weights_joined %>%
mutate(date = dmy(as.character(date)))  # convert character → Date (dd/mm/yyyy)
pr2_weights_joined <- pr2_weights_joined %>%
mutate(date = dmy(as.character(date)))  # also force to Date with EU format
pr_combined <- bind_rows(pr2_weights_joined[common_cols], pr1_weights_joined[common_cols])
pr_combined$con_mg_per_ml <- (pr_combined$X600 - intercept) / slope
# ---- Step 4: Convert to total protein in extract (500 µL = 0.5 mL)
# First, calculate protein in the well (20 µL = 0.02 mL), then scale
pr_combined$Protein_mg_total <- pr_combined$con_mg_per_ml * 0.5  # total protein in extract
# ---- Step 5: Convert to mg protein per g sample
pr_combined$Protein_mg_per_g <- (pr_combined$Protein_mg_total / pr_combined$weights) * 1000
