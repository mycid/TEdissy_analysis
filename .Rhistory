#
#
#
#
#
#
#
#
#
joindf_by_id <- function(df1,
df2,
key_df1,
key_df2,
output_name     = NULL,
unmatched_out   = NULL) {
# Warn if "join_id" already exists
if ("join_id" %in% names(df1)) warning("'join_id' column in df1 will be overwritten.")
if ("join_id" %in% names(df2)) warning("'join_id' column in df2 will be overwritten.")
# Drop any existing 'join_id' column before renaming
df1 <- df1 %>% select(-any_of("join_id"))
df2 <- df2 %>% select(-any_of("join_id"))
# Rename ID columns to a common name for joining
df1_renamed <- df1 %>% rename(join_id = all_of(key_df1))
df2_renamed <- df2 %>% rename(join_id = all_of(key_df2))
# Perform the join
joined <- full_join(df1_renamed, df2_renamed, by = "join_id")
# Write final joined data if path is provided
if (!is.null(output_name)) {
write.csv(joined, output_name, row.names = FALSE)
}
# Identify and optionally save unmatched rows (e.g., missing from df2)
if (!is.null(unmatched_out)) {
unmatched <- joined %>% filter(is.na(.[[key_df2]]))
write.csv(unmatched, unmatched_out, row.names = FALSE)
}
return(joined)
}
# 2. Join PErep_enhanced with Sample data
joindf_by_id(
df1          = pr_combined_clean,
df2          = `Sample data`,
output_name  = file.path(final_export_dir, "pr_rep_final.csv"),
unmatched_out = file.path(final_export_dir, "Pr_rep_unmatched.csv"),
key_df1      = "ID",
key_df2      = "ID"
)
# 1. Merge enhanced replicate summary with metadata by column "ID"
#    This will save "PErep_final.csv" and assign the merged data frame to `PErep_final`.
# 1. Define export folder and create it if needed
final_export_dir <- file.path("output PE", "export data", "Samples Analysis Final")
dir.create(final_export_dir, recursive = TRUE, showWarnings = FALSE)
#
pr_combined_clean <- pr_combined_clean %>%
distinct(join_id, .keep_all = TRUE)
# 2. Join PErep_enhanced with Sample data
joindf_by_id(
df1          = pr_combined_clean,
df2          = `Sample data`,
output_name  = file.path(final_export_dir, "pr_rep_final.csv"),
unmatched_out = file.path(final_export_dir, "Pr_rep_unmatched.csv"),
key_df1      = "ID",
key_df2      = "ID"
)
#
#
#
#
#
#
#
#
#
#
joindf_by_id <- function(df1,
df2,
key_df1,
key_df2,
output_name     = NULL,
unmatched_out   = NULL) {
# Warn if "join_id" already exists
if ("join_id" %in% names(df1)) warning("'join_id' column in df1 will be overwritten.")
if ("join_id" %in% names(df2)) warning("'join_id' column in df2 will be overwritten.")
# Drop any existing 'join_id' column before renaming
df1 <- df1 %>% select(-any_of("join_id"))
df2 <- df2 %>% select(-any_of("join_id"))
# Rename ID columns to a common name for joining
df1_renamed <- df1 %>% rename(join_id = all_of(key_df1))
df2_renamed <- df2 %>% rename(join_id = all_of(key_df2))
# Perform the join
joined <- full_join(df1_renamed, df2_renamed, by = "join_id")
# Write final joined data if path is provided
if (!is.null(output_name)) {
write.csv(joined, output_name, row.names = FALSE)
}
# Identify and optionally save unmatched rows (e.g., missing from df2)
if (!is.null(unmatched_out)) {
df2_cols <- setdiff(names(df2_renamed), "join_id")
unmatched <- joined %>%
filter(if_any(all_of(df2_cols), ~ is.na(.x)))
write.csv(unmatched, unmatched_out, row.names = FALSE)
}
return(joined)
}
# 2. Join PErep_enhanced with Sample data
joindf_by_id(
df1          = pr_combined_clean,
df2          = `Sample data`,
output_name  = file.path(final_export_dir, "pr_rep_final.csv"),
unmatched_out = file.path(final_export_dir, "Pr_rep_unmatched.csv"),
key_df1      = "ID",
key_df2      = "ID"
)
# 3. Read in the joined summary
PErep_final <- readr::read_csv(file.path(final_export_dir, "PErep_final.csv"))
# 3. Read in the joined summary
pr_rep_final <- readr::read_csv(file.path(final_export_dir, "pr_rep_final.csv"))
# 2. Join PErep_enhanced with Sample data
pr_rep_final <- joindf_by_id(
df1          = pr_combined_clean,
df2          = `Sample data`,
output_name  = file.path(final_export_dir, "pr_rep_final.csv"),
unmatched_out = file.path(final_export_dir, "Pr_rep_unmatched.csv"),
key_df1      = "ID",
key_df2      = "ID"
)
# 4. Define output directory for replicate analysis plots
rep_plot_dir <- file.path("output prot", "plots", "replicate_analysis")
dir.create(rep_plot_dir, recursive = TRUE, showWarnings = FALSE)
View(pr_rep_final)
View(pr_combined)
# Source script from top-level project folder
source("../process_plate_run.R")
#— 1. pull from params (or use defaults)
plot_dir   <- params$plot_dir   %||% "output_prot/plots"
data_dir   <- params$data_dir   %||% "output_prot/export_data"
report_dir <- params$report_dir %||% "output_prot/reports"
#— 2. create all dirs
walk(
c(plot = plot_dir, data = data_dir, reports = report_dir),
~ if (!dir_exists(.x)) dir_create(.x, recurse = TRUE)
)
#— 3. register plot_dir with knitr
opts_chunk$set(fig.path = paste0(plot_dir, "/"))
#
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Source script from top-level project folder
source("../process_plate_run.R")
#— 1. pull from params (or use defaults)
plot_dir   <- params$plot_dir   %||% "output_prot/plots"
data_dir   <- params$data_dir   %||% "output_prot/export_data"
report_dir <- params$report_dir %||% "output_prot/reports"
#— 2. create all dirs
walk(
c(plot = plot_dir, data = data_dir, reports = report_dir),
~ if (!dir_exists(.x)) dir_create(.x, recurse = TRUE)
)
#— 3. register plot_dir with knitr
opts_chunk$set(fig.path = paste0(plot_dir, "/"))
#
# 1. Define the folder containing all Excel inputs
input_folder <- "Input_prot"
# 2. Find all .xlsx files (full paths), excluding temp files that start with "~$"
excel_files <- list.files(
path = input_folder,
pattern = "\\.xlsx?$",
full.names = TRUE
)
excel_files <- excel_files[!grepl("^~\\$", basename(excel_files))]
# 3. Loop over each file
for (file in excel_files) {
# 3a. Create a clean object name (strip out folder & extension)
name <- tools::file_path_sans_ext(basename(file))
# 3b. Determine which sheet to read (second if possible, otherwise first)
sheet_names   <- excel_sheets(file)
sheet_to_read <- if (length(sheet_names) >= 2) sheet_names[2] else sheet_names[1]
# 3c. Read the chosen sheet, suppressing verbose messages
data <- suppressMessages(read_excel(file, sheet = sheet_to_read))
# 3d. Assign the data.frame to the global environment under "name"
assign(name, data, envir = .GlobalEnv)
# 3e. Print a message to confirm successful load
message("Loaded: ", name, " (sheet = '", sheet_to_read, "')")
}
# 1. Define which wells were used as blanks in each run
blanks1 <- c("A01", "A02", "A03")
blanks2 <- c("H11", "H12")
#
# 2. Build named lists of raw datasets and their corresponding blank vectors
listprot    <- list(pr1 = pr1, pr2 = pr2)
#
listBlanks <- list(blanks1, blanks2)
#
# 3. Run the wrapper: it calls tidy_and_correct() on each dataset
tidy_all(listprot, listBlanks)
# 1. Create output subdirectory
# 1. Create subdirectory for joined weights inside data_dir
joined_weights_dir <- file.path(data_dir, "joined_weights_prot")
if (!dir_exists(joined_weights_dir)) dir_create(joined_weights_dir, recurse = TRUE)
# 2. Build weight and PE data frame lists
list_weights <- list(
pr1_weights,
pr2_weights
)
pr_list <- list(
pr1 = pr1_tidy,
pr2 = pr2_tidy
)
# 3. Join + save using joindf_by_id and your output file paths
mapply(
function(df1, df2, name) {
# Construct full file paths
joined_path   <- file.path(joined_weights_dir, paste0(name, "_weights_joined.csv"))
unmatched_path <- file.path(joined_weights_dir, paste0(name, "_weights_unmatched.csv"))
# Call your existing function
joindf_by_id(
df1           = df1,
df2           = df2,
output_name   = joined_path,
unmatched_out = unmatched_path,
key_df1       = "Cell_ID",
key_df2       = "plate well"
)
},
df1 = pr_list,
df2 = list_weights,
name = names(pr_list),
SIMPLIFY = FALSE
)
analyze_replicates(
data          = pr_combined,
id_col        = "ID",         # column that uniquely identifies each sample
join_col      = "join_id",         # also used for joining, same as id_col here
weight_col    = "weights",   # column containing sample weight in grams
date_col      = "date",            # column containing sample collection date
output_prefix = "pr_rep",   # prefix for output files (will produce all_rep_analy_summary.csv)
choose_best_3 = TRUE, # do not filter replicates, use all
dir = "output_prot/export_data/"
)
# Use the regression model to predict concentration from absorbance
# Rearranged formula: concentration = (absorbance - intercept) / slope
intercept <- coef(model)[1]
slope     <- coef(model)[2]
# 1. Find common columns
common_cols <- intersect(names(pr2_weights_joined), names(pr1_weights_joined))
# Force both weights columns to numeric
pr1_weights_joined <- pr1_weights_joined %>% mutate(weights = as.numeric(weights))
pr2_weights_joined <- pr2_weights_joined %>% mutate(weights = as.numeric(weights))
# Fix the dates
pr1_weights_joined <- pr1_weights_joined %>%
mutate(date = parse_date_time(date, orders = c("ymd", "dmy", "mdy")))
pr2_weights_joined <- pr2_weights_joined %>%
mutate(date = parse_date_time(date, orders = c("ymd", "dmy", "mdy")))  # also force to Date with EU format
# 2. Subset and bind
pr_combined <- bind_rows(pr2_weights_joined[common_cols], pr1_weights_joined[common_cols])
pr_combined$con_mg_per_ml <- (pr_combined$X600 - intercept) / slope
# ---- Step 4: Convert to total protein in extract (500 µL = 0.5 mL)
# First, calculate protein in the well (20 µL = 0.02 mL), then scale
pr_combined$Protein_mg_total <- pr_combined$con_mg_per_ml * 0.5  # total protein in extract
# ---- Step 5: Convert to mg protein per g sample
pr_combined$Protein_mg_per_g <- (pr_combined$Protein_mg_total / pr_combined$weights) * 1000
## ---- Step 6: Filter out blanks and standards
pr_combined <- pr_combined[is.finite(pr_combined$Protein_mg_per_g) & !is.na(pr_combined$Protein_mg_per_g), ]
## ---- Create a factor for each run to allow testing for differences between the runs
pr_combined <- pr_combined %>%
mutate(run = as.factor(match(as.Date(date), unique(as.Date(date)))))
## ---- test for differences in the runs
t.test(Protein_mg_per_g ~ run, data = pr_combined)
# OR Wilcoxon test (if data are not normally distributed)
wilcox.test(Protein_mg_per_g ~ run, data = pr_combined)
# Visualize differences in box and whisker plot
ggplot(pr_combined, aes(x = run, y = Protein_mg_per_g, fill = run)) +
geom_boxplot(outlier.shape = NA, width = 0.6) +  # boxplot without outliers
geom_jitter(width = 0.1, alpha = 0.5, color = "black") +  # add jittered points
labs(
title = "Protein Content by Run",
x = "Run",
y = "Protein (mg/g)"
) +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5)
)
#
# Identify outliers with IQR
# Filter for just runs 1 and 2 (if needed)
df_runs12 <- pr_combined %>% filter(run %in% c("1", "2"))
# Calculate non-parametric bounds
iqr_vals <- IQR(df_runs12$Protein_mg_per_g, na.rm = TRUE)
q1 <- quantile(df_runs12$Protein_mg_per_g, 0.25, na.rm = TRUE)
q3 <- quantile(df_runs12$Protein_mg_per_g, 0.75, na.rm = TRUE)
lower_bound <- q1 - 1.5 * iqr_vals
upper_bound <- q3 + 1.5 * iqr_vals
# Add flag column to full dataframe
pr_combined <- pr_combined %>%
mutate(outlier_flag = ifelse(
Protein_mg_per_g < lower_bound | Protein_mg_per_g > upper_bound,
"outlier", "normal"
))
pr_combined_clean <- pr_combined %>%
filter(outlier_flag == "normal")
analyze_replicates(
data          = pr_combined_clean,
id_col        = "ID",         # column that uniquely identifies each sample
join_col      = "join_id",         # also used for joining, same as id_col here
weight_col    = "weights",   # column containing sample weight in grams
date_col      = "date",            # column containing sample collection date
output_prefix = "pr_rep",   # prefix for output files (will produce all_rep_analy_summary.csv)
choose_best_3 = TRUE, # do not filter replicates, use all
dir = "output_prot/export_data/"
)
#
# 1. Define the variables to plot
variables <- c("Protein_mg_g", "X600")
# 1. Define output directory for protein replicate analysis
protein_plot_dir <- file.path("output_prot", "plots", "replicate_analysis")
dir.create(protein_plot_dir, recursive = TRUE, showWarnings = FALSE)
# 2. Read protein replicate summary data
protein_summary <- read.csv("output_prot/export_data/pr_rep_summary.csv")
View(protein_summary)
# 3. Define variable name
protein_var <- "Protein_mg_per_g"
se_col_name   <- paste0(protein_var, "_se")
mean_col_name <- paste0(protein_var, "_mean")
output_prefix <- file.path(protein_plot_dir, paste0(protein_var, "_replicate_analysis"))
# 4. Generate plot using custom error bar function
protein_plot <- graph_replicates_custom_error(
data          = protein_summary,
id_col        = "ID",
value_col     = mean_col_name,
se_col        = se_col_name,
output_prefix = output_prefix
)
# 5. Save interactive plot using your custom save_object function
save_object(
object    = protein_plot,
filename  = paste0(protein_var, "_replicate_plot"),  # e.g. "Protein_replicate_plot"
directory = "plots",
format    = "html",
subdir    = "replicate_analysis/protein",  # This goes inside plot_dir
)
# 5. Save interactive plot using your custom save_object function
save_object(
object    = protein_plot,
filename  = paste0(protein_var, "_replicate_plot"),  # e.g. "Protein_replicate_plot"
directory = "plots",
format    = "html",
subdir    = "replicate_analysis/protein",  # This goes inside plot_dir
)
# 6. Display plot in HTML report
protein_plot
#
protein_summary %>%
summarise(
total_rows      = n(),
high_cv_count   = sum(Protein_mg_per_g_cv > 0.2, na.rm = TRUE),
average_cv   = mean(Protein_mg_per_g_cv, na.rm = TRUE),
high_cv_percent = mean(Protein_mg_per_g_cv > 0.2, na.rm = TRUE) * 100
)
#
protein_summary <- protein_summary %>%
distinct(join_id, .keep_all = TRUE)
# 2. Join PErep_enhanced with Sample data
pr_rep_final <- joindf_by_id(
df1          = protein_summary,
df2          = `Sample data`,
output_name  = file.path(final_export_dir, "pr_rep_final.csv"),
unmatched_out = file.path(final_export_dir, "Pr_rep_unmatched.csv"),
key_df1      = "ID",
key_df2      = "ID"
)
# 4. Define output directory for replicate analysis plots
rep_plot_dir <- file.path("output prot", "plots", "replicate_analysis")
dir.create(rep_plot_dir, recursive = TRUE, showWarnings = FALSE)
# 5. Generate histogram with error bars for PE_mg_per_g_sample_mean
graph_replicates_custom_error(
data          = Pr_rep_final,
id_col        = "join_id",
value_col     = "Protein_mg_per_g_mean",
se_col        = "Protein_mg_per_g_sample_se",
output_prefix = file.path(rep_plot_dir, "E_rep_analy")
)
# 5. Generate histogram with error bars for PE_mg_per_g_sample_mean
graph_replicates_custom_error(
data          = Pr_rep_final,
id_col        = "Location",
value_col     = "Protein_mg_per_g_mean",
se_col        = "Protein_mg_per_g_se",
output_prefix = file.path(rep_plot_dir, "protein_rep_analy_bylocation")
)
# 5. Generate histogram with error bars for PE_mg_per_g_sample_mean
graph_replicates_custom_error(
data          = pr_rep_final,
id_col        = "Location",
value_col     = "Protein_mg_per_g_mean",
se_col        = "Protein_mg_per_g_se",
output_prefix = file.path(rep_plot_dir, "protein_rep_analy_bylocation")
)
# 2. Join PErep_enhanced with Sample data
joindf_by_id(
df1          = protein_summary,
df2          = `Sample data`,
output_name  = file.path(final_export_dir, "pr_rep_final.csv"),
unmatched_out = file.path(final_export_dir, "Pr_rep_unmatched.csv"),
key_df1      = "ID",
key_df2      = "ID"
)
# 1. Merge enhanced replicate summary with metadata by column "ID"
#    This will save "PErep_final.csv" and assign the merged data frame to `PErep_final`.
# 1. Define export folder and create it if needed
final_export_dir <- file.path("output PE", "export data", "Samples Analysis Final")
dir.create(final_export_dir, recursive = TRUE, showWarnings = FALSE)
# 2. Join PErep_enhanced with Sample data
joindf_by_id(
df1          = protein_summary,
df2          = `Sample data`,
output_name  = file.path(final_export_dir, "pr_rep_final.csv"),
unmatched_out = file.path(final_export_dir, "Pr_rep_unmatched.csv"),
key_df1      = "ID",
key_df2      = "ID"
)
# 4. Define output directory for replicate analysis plots
rep_plot_dir <- file.path("output prot", "plots", "replicate_analysis")
dir.create(rep_plot_dir, recursive = TRUE, showWarnings = FALSE)
# 5. Generate histogram with error bars for PE_mg_per_g_sample_mean
graph_replicates_custom_error(
data          = pr_rep_final,
id_col        = "Location",
value_col     = "Protein_mg_per_g_mean",
se_col        = "Protein_mg_per_g_se",
output_prefix = file.path(rep_plot_dir, "protein_rep_analy_bylocation")
)
PE_location <- PErep_final %>%
filter(!Location %in% c("Lima Market Freeze Dry", "Ilo Freeze Dry", "Ilo oven dry", "Ilo Fresh", "Lima Market Fresh"))
pr_location <- pr_rep_final %>%
filter(!Location %in% c("Lima Market Freeze Dry", "Ilo Freeze Dry", "Ilo oven dry", "Ilo Fresh", "Lima Market Fresh"))
pr_location <- pr_rep_final %>%
filter(!Location %in% c("Lima Market Freeze Dry", "Ilo Freeze Dry", "Ilo oven dry", "Ilo Fresh", "Lima Market Fresh"))
pr_location_cham <- pr_rep_final %>%
filter(!variety %in% c("F.Glom"))
###################################################Location
compare_groups(
data         = PE_location_cham,
response_var = "pr_mg_per_g_sample_mean",
group_var    = "Location",
subfolder_name = "pr_Location_cham_A"
)
###################################################Location
compare_groups(
data         = PE_location_cham,
response_var = "pr_mg_per_g_mean",
group_var    = "Location",
subfolder_name = "pr_Location_cham_A"
)
###################################################Location
compare_groups(
data         = pr_location_cham,
response_var = "pr_mg_per_g_mean",
group_var    = "Location",
subfolder_name = "pr_Location_cham_A"
)
###################################################Location
compare_groups(
data         = pr_location_cham,
response_var = "Protein_mg_per_g_mean",
group_var    = "Location",
subfolder_name = "pr_Location_cham"
)
################################################Life_S
compare_groups(
data         = pr_location_cham,
response_var = "Protein_mg_per_g_mean",
group_var    = "Life_S",
subfolder_name = "pr_Life_S_cham"
)
###########################################Variety
pr_paracas_marcona <- pr_rep_final %>%
filter(Location %in% c("Mendieta", "7H", "Caro Caido"))
compare_groups(
data         = pr_paracas_marcona,
response_var = "pr_mg_per_g_mean",
group_var    = "variety",
subfolder_name = "pr_variety"
)
###########################################Variety
pr_paracas_marcona <- pr_rep_final %>%
filter(Location %in% c("Mendieta", "7H", "Caro Caido"))
compare_groups(
data         = pr_paracas_marcona,
response_var = "pr_mg_per_g_mean",
group_var    = "variety",
subfolder_name = "pr_variety"
)
compare_groups(
data         = pr_paracas_marcona,
response_var = "Protein_mg_per_g_mean",
group_var    = "variety",
subfolder_name = "pr_variety"
)
pr_gamtetra <- pr_location %>%
filter(Life_S %in% c("Gam/Tetra", "Gam", "Tetra"))
compare_groups(
data         = pr_gamtetra,
response_var = "pr_mg_per_g_mean",
group_var    = "Location",
subfolder_name = "pr_gamtetra_location"
)
compare_groups(
data         = pr_gamtetra,
response_var = "Protein_mg_per_g_mean",
group_var    = "Location",
subfolder_name = "pr_gamtetra_location"
)
